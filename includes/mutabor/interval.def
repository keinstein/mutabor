/** \file
 ********************************************************************
 * Intervallberechnungen
 *
 * $Id: interval.def,v 1.1 2005/11/03 13:57:46 keinstein Exp $
 * \author R.Krauße
 *         Tobias Schlemmer <keinstein@users.berlios.de>
 * \date $Date: 2005/11/03 13:57:46 $
 * \version $Revision: 1.1 $
 * 
 * $Log: interval.def,v $
 * Revision 1.1  2005/11/03 13:57:46  keinstein
 * basic interval class
 *
 ********************************************************************/

#if ! defined (__INTERVAL_H_INCLUDED)
#define __INTERVAL_H_INCLUDED

#ifdef __cplusplus 
namespace mutabor {
  extern "C" {
#endif

#include "identifier.h"
#include "bad_decl.h"

    /** Interval class. */

%include "identifier.def"
%class interval
%parent identifier
%field MUTABOR_FLOAT factor
%virtual void * constructor (void * _self)
%virtual int compare (void * one, void * two)
%virtual char * tostring(void * _self)
%function void set_factor(void * _self,MUTABOR_FLOAT value)
%endclass

#ifdef OLD_MUTABOR_CLASSES
#define MUTABOR_CLASS_DEFINITIONS_interval(class) \
  PARENT(class,identifier)\
  FIELD(class,MUTABOR_FLOAT,value)\
  OVERRIDE(class, void *, constructor, void * _self) \
  OVERRIDE(class, void *, destructor, void * _self) \
  OVERRIDE(class, int, compare, void * one, void * two) \
  OVERRIDE(class, char *, tostring,void * _self)

MUTABOR_DECLARE_CLASS(interval);
#endif


    /** Old Functionality */


    /*********  Definition der Intervalle als verkettete Liste ********/

    /** Intervalle können absolut oder über mehrere Sprünge angegeben werden. */
    enum intervall_typ {intervall_absolut, intervall_komplex};

    /** Folge von Intervallen, die zum Grundton addiert werden. */
    struct komplex_intervall {
      double faktor; /**< exponent des Frequenzfaktors */
      char * name; /**< Name des Intervalles */
      struct komplex_intervall * next; /**< Liste der Einzel-Intervalle */
    };

    /** Definition der Intervalle als einfach verkettete Liste.
     * 
     */ 
    struct intervall {
      char * name; /**< Name des Intervalls */
      enum intervall_typ intervall_typ; /**< Typ des Intervalles */
      union {
        struct {
	  double intervall_wert; /**< Wert eines absoluten Intervalles */
        } intervall_absolut; /**< Daten des absoluten Intervalles */
        struct {
	  struct komplex_intervall * komplex_liste; /**< Liste der Intervalle */
        } intervall_komplex; /**< Daten eines zusammengesetzten Intervalles */
      } u; /**< Daten des Intervalles */
      struct intervall *next; /**< Nächstes in der Liste */
    };

    void get_new_intervall (char * name, double wert);
    void get_new_intervall_komplex (char * name);
    double get_wert_komplex_intervall (struct komplex_intervall * intervall);
    void get_new_faktor_anteil (double f, char *name);

    struct intervall * get_intervall (char * name,
                                      struct intervall * liste);
    int intervall_list_laenge (struct intervall *list);
    void berechne_intervalle_absolut (struct intervall * list_of_intervalle);
    void check_komplex_intervall (struct komplex_intervall * liste,
				  char * konstrukt_name);
    double get_komplex_faktor (struct komplex_intervall * lauf);

    struct komplex_intervall * get_last_komplex_intervall (void);
    extern struct intervall      *  list_of_intervalle;

#ifdef __cplusplus
  }
}
#endif

#endif
