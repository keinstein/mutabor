
 Start         Length     Name                   Class
 0001:00401000 00001ABDAH _TEXT                  CODE
 0002:0041C000 000006F74H _DATA                  DATA
 0003:00422F74 00004F378H _BSS                   BSS
 0004:00000000 0000000B0H _TLS                   TLS

  Address         Publics by Name

 0003:0004AE64      @B10_2
 0003:0004AE8C      @B11_2
 0003:0004AF10      @B12_2
 0003:0004C720      @B14_2
 0003:0004C734      @B15_2
 0003:0004C73C      @B18_2
 0003:0004C76C      @B20_2
 0003:0004EF84      @B22_2
 0003:00000000      @B3_2
 0003:00012C28      @B6_2
 0003:00048E54      @B7_2
 0003:0004AE4C      @B8_2
 0003:0004AE54      @B9_2
 0001:00008380      @C10_0
 0001:00009A20      @C11_0
 0001:0000C044      @C12_0
 0001:0000D184      @C13_0
 0001:00010B04      @C14_0
 0001:000128D4      @C15_0
 0001:000137D2      @C15_3
 0001:00013E08      @C16_0
 0001:0001A440      @C175_0
 0001:0001A6B8      @C176_0
 0001:00014034      @C17_0
 0001:0001A6F4      @C186_0
 0001:00014618      @C18_0
 0001:000156B1      @C18_3
 0001:0001A898      @C190_0
 0001:00016534      @C19_0
 0001:00000000      @C1_0
 0001:00019210      @C20_0
 0001:0001A07F      @C20_3
 0001:0001A098      @C22_0
 0001:00000190      @C2_0
 0001:0000413C      @C3_0
 0001:0001A1F4      @C40_0
 0001:0001A224      @C41_0
 0001:0001A24C      @C42_0
 0001:0001A36A      @C42_2
 0001:000067E0      @C6_0
 0001:00007890      @C7_0
 0001:00007C28      @C8_0
 0001:00007F7C      @C9_0
 0002:00002CF4      @D10_1
 0002:000042D4      @D11_1
 0002:0000451C      @D12_1
 0002:000045E8      @D13_1
 0002:00004CB8      @D14_1
 0002:00004D88      @D15_1
 0002:00004F84      @D16_1
 0002:00006D7C      @D175_1
 0002:00004F94      @D17_1
 0002:00006EDC      @D182_1
 0002:00006EE0      @D186_1
 0002:00004F9C      @D18_1
 0002:00006F54      @D190_1
 0002:00005734      @D19_1
 0002:00000020      @D1_1
 0002:00005D7C      @D20_1
 0002:00006954      @D21_1
 0002:00006C3C      @D22_1
 0002:000000F0      @D2_1
 0002:00006C9C      @D30_1
 0002:000015C0      @D3_1
 0002:00006CA4      @D41_1
 0002:00006CE4      @D42_1
 0002:00001BC8      @D5_1
 0002:00002A20      @D6_1
 0002:00002C04      @D7_1
 0002:00002CB4      @D8_1
 0002:00002CC8      @D9_1
 0004:00000000      @T175_3
 0001:0001A6B8      @__InitExceptBlockLDTC
 0001:000146DE      Acc2Int(const char*)
 0001:00004245      Activate
 0001:000070D4      AddKey(int,int,int)
 0001:00014918      AddStr(char**,const char*,const char*)
 0001:00019210      AddStr(char*,int&,char*)
 0001:00016B59      AddTag(TagListData**,GisTag*)
 0001:00007890      AktionenInit()
 0001:0000789C      AktionenMessage(int,char*)
 0001:00014D48      BeginParameter()
 0001:00014DAA      BeginRange()
 0001:00014B3C      BeginSegment()
 0001:00014C42      BeginSequenz()
 0001:00014991      BuildTag()
 0001:00019241      CharIn(char,const char*)
 0001:00019309      CheckError(int)
 0001:000043B6      CheckNeedsRealTime
 0001:00017750      ChordNote::AddGis(GisToken*)
 0001:00017788      ChordNote::CheckCloseAlter()
 0001:0001785D      ChordNote::CheckCloseTie()
 0001:00017373      ChordNote::ChordNote(ChordNote*)
 0001:00017550      ChordNote::CountOnTime(frac)
 0001:00017C1D      ChordNote::MutNoteOff()
 0001:000179E4      ChordNote::MutNoteOn(int,double,int,int,char*)
 0001:000176C3      ChordNote::SetNoteOff(GisToken*)
 0001:00017599      ChordNote::SetNoteOn(GisToken*)
 0001:000190F0      ChordNote::~ChordNote()
 0001:000148FD      Clear(char**)
 0001:00018EE5      CloseAllSubs(GisWriteHead*)
 0001:0001A10B      CloseFile()
 0001:00017315      CmpNote(GisToken*,GisToken*)
 0001:000153A9      Comma()
 0001:0000413C      Compile
 0001:00016AF3      Copy(TagListData*)
 0001:000155A0      CopyPara(GisToken*)
 0001:00010CB2      CurrentTimeFunc(unsigned int,unsigned int,unsigned long,unsigned long,unsigned long) __stdcall
 0001:0000717A      DeleteKey(int,int,int)
 0001:0001A1F4      DllEntryPoint
 0001:000192BA      DoError(int,int)
 0001:00019C32      DoParse()
 0001:00014D66      EndParameter()
 0001:00014F46      EndRange()
 0001:00014BF4      EndSegment()
 0001:00014CFA      EndSequenz()
 0001:00016BA2      EndTag(TagListData**,GisTagEnd*)
 0001:00016B1E      Erase(TagListData*)
 0001:00007904      GetActString
 0001:000045DF      GetAktuellesKeyboardInstrument
 0001:00004556      GetChannels
 0001:00007BFD      GetErrorLine
 0001:0001550B      GetGisType(GisToken*)
 0001:00004531      GetInDevicesMode
 0001:000128D4      GetKeyPitch(int,TSYS*,int&,double&)
 0001:00007B9B      GetKeyString
 0001:000045E9      GetLine(char**,char*)
 0001:00007BF3      GetLineNumbers
 0001:00018C97      GetMatchingHeader(GisWriteHead**,char*)
 0001:00016570      GetMidiInstrument(GisToken*)
 0001:000043C0      GetMutTag
 0001:000046EE      GetOut(int)
 0001:00016534      GetReal(GisToken*)
 0001:0001937D      GetSep()
 0001:00007BC7      GetTSString
 0001:00015524      GetTagId(const char*,char**)
 0001:000165CF      GetTheSpeedFactor(GisToken*)
 0001:000051BB      GetTimerData
 0002:0000566C      GisComma::
 0001:00015B10      GisComma::Type() const
 0001:000164D0      GisComma::~GisComma()
 0002:00005720      GisNote::
 0001:000148BF      GisNote::GetKey()
 0001:00014737      GisNote::GisNote(int,int,int,char*,GisToken*)
 0001:00015F2C      GisNote::Type() const
 0001:00015F38      GisNote::~GisNote()
 0002:000056A8      GisParaInt::
 0001:00015C84      GisParaInt::Copy()
 0001:00015C78      GisParaInt::Type() const
 0001:00016370      GisParaInt::~GisParaInt()
 0002:00005694      GisParaReal::
 0001:00015BD8      GisParaReal::Copy()
 0001:00015BCC      GisParaReal::Type() const
 0001:000163D4      GisParaReal::~GisParaReal()
 0002:00005680      GisParaStr::
 0001:00015B28      GisParaStr::Copy()
 0001:00015B1C      GisParaStr::Type() const
 0001:00016438      GisParaStr::~GisParaStr()
 0001:000155D4      GisParse(const char*)
 0001:00016F67      GisReadArtDummy(GisReadArtHead*,char)
 0002:00004F74      GisReadArtHead::
 0001:00013B5C      GisReadArtHead::Build(GisReadHead*,GisToken*,char*,char)
 0001:00016BE7      GisReadArtHead::Read()
 0001:00013D04      GisReadArtHead::~GisReadArtHead()
 0001:00016F6C      GisReadArtHeadOn(GisReadArtHead**,frac,void(*)(GisReadArtHead*,char))
 0001:000168AC      GisReadDummy(GisReadHead*,char)
 0002:00004F64      GisReadHead::
 0001:00013A8C      GisReadHead::Build(GisReadHead*,GisToken*,char*,char)
 0001:00016779      GisReadHead::CreateSegmentSubs()
 0001:00016806      GisReadHead::CreateSequenzSubs()
 0001:0001673E      GisReadHead::CutOut()
 0001:00016703      GisReadHead::InsertInfrontOf(GisReadHead*)
 0001:0001685C      GisReadHead::Read()
 0001:00013810      GisReadHead::~GisReadHead()
 0001:000168B1      GisReadHeadOn(GisReadHead**,frac,void(*)(GisReadHead*,char))
 0002:000056F8      GisSegment::
 0001:00015E30      GisSegment::Type() const
 0001:00016088      GisSegment::~GisSegment()
 0002:000056E4      GisSequenz::
 0001:00015E24      GisSequenz::Type() const
 0001:00016168      GisSequenz::~GisSequenz()
 0002:0000570C      GisTag::
 0001:00015E48      GisTag::Copy()
 0001:00014648      GisTag::GetPara(int)
 0001:00014618      GisTag::GetParaType(int)
 0001:00015E3C      GisTag::Type() const
 0001:00015F9C      GisTag::~GisTag()
 0002:000056D0      GisTagBegin::
 0001:00015D2C      GisTagBegin::Copy()
 0001:00015D20      GisTagBegin::Type() const
 0001:00016248      GisTagBegin::~GisTagBegin()
 0002:000056BC      GisTagEnd::
 0001:00015D14      GisTagEnd::Type() const
 0001:0001630C      GisTagEnd::~GisTagEnd()
 0001:000129F1      GisTimeFunc(unsigned int,unsigned int,unsigned long,unsigned long,unsigned long) __stdcall
 0002:00004F50      GisToken::
 0001:000139CC      GisToken::Copy()
 0001:000139C0      GisToken::Type() const
 0001:00013898      GisToken::~GisToken()
 0001:00018C2D      GisWriteHead::AddTime(frac)
 0001:0001837A      GisWriteHead::CloseCurrentToken(char)
 0001:00018237      GisWriteHead::CloseSubs(GisToken**)
 0001:00017D9F      GisWriteHead::CutOut()
 0001:00017DD4      GisWriteHead::GetFreeNote()
 0001:00018166      GisWriteHead::GetNote(int,int)
 0001:00017D72      GisWriteHead::InsertAfter(GisWriteHead*)
 0001:00018613      GisWriteHead::ProceedGis(GisToken*,char)
 0001:0001819A      GisWriteHead::ReadyForBoss()
 0001:000181AF      GisWriteHead::RemoveComma()
 0001:00018B0F      GisWriteHead::WriteChord()
 0001:00005E50      GisWriteHead::~GisWriteHead()
 0001:00018EC2      GisWriteHeadGis(GisWriteHead**,char*,GisToken*,char)
 0001:000067E0      GlobalReset()
 0001:00019FA0      GspParse(const char*)
 0001:00006F6D      HarmonyAnalysis(int,PTRN*)
 0001:00013F59      InClose()
 0002:00001B9C      InDevice::
 0001:00013E63      InDevice::AddRoute(Route*)
 0001:00013E18      InDevice::GetMoveRoutes()
 0001:00013E2A      InDevice::GetRoute(int)
 0001:00005CC8      InDevice::GetType() const
 0001:0000595C      InDevice::NeedsRealTime()
 0001:00013E7C      InDevice::Quite()
 0001:00013E49      InDevice::nRoutes()
 0001:00005270      InDevice::~InDevice()
 0001:00004337      InDeviceAction
 0001:00004516      InDevicesChanged
 0002:000019F4      InGis::
 0001:00012BDC      InGis::Close()
 0001:000059DC      InGis::GetName()
 0001:000059E8      InGis::GetType() const
 0001:00013036      InGis::IncDelta()
 0001:00012A01      InGis::Open()
 0001:00013013      InGis::Pause()
 0001:00012FE3      InGis::Play()
 0001:00013130      InGis::Proceed(GisReadArtHead*,char,Route*)
 0001:0001337F      InGis::ProceedRoute(GisReadArtHead*,char)
 0001:00013442      InGis::ReadOn(long)
 0001:00012D6A      InGis::Stop()
 0001:00006178      InGis::~InGis()
 0002:00001994      InMidiFile::
 0001:00011EA9      InMidiFile::Close()
 0001:00005964      InMidiFile::GetName()
 0001:00005970      InMidiFile::GetType() const
 0001:00012018      InMidiFile::IncDelta()
 0001:00011B0A      InMidiFile::Open()
 0001:00011FEC      InMidiFile::Pause()
 0001:00011FB3      InMidiFile::Play()
 0001:00012658      InMidiFile::Proceed(unsigned long,int)
 0001:0001248C      InMidiFile::ProceedRoute(unsigned long,Route*)
 0001:00012103      InMidiFile::ReadMidiProceed(int,long)
 0001:0000597C      InMidiFile::ReadOn(frac)
 0001:00011F0E      InMidiFile::Stop()
 0001:00006270      InMidiFile::~InMidiFile()
 0002:000019C4      InMidiPort::
 0001:00010832      InMidiPort::Close()
 0001:000059B0      InMidiPort::GetName()
 0001:000059BC      InMidiPort::GetType() const
 0001:000059A8      InMidiPort::NeedsRealTime()
 0001:000107A8      InMidiPort::Open()
 0001:000059A0      InMidiPort::Pause()
 0001:00005998      InMidiPort::Play()
 0001:00010A2D      InMidiPort::Proceed(unsigned long)
 0001:0001088B      InMidiPort::ProceedRoute(unsigned long,Route*)
 0001:000059C8      InMidiPort::ReadOn(frac)
 0001:00005990      InMidiPort::Stop()
 0001:000061F4      InMidiPort::~InMidiPort()
 0001:00013F3B      InOpen()
 0001:00007933      InitCompDia(HWND__*)
 0001:0001925E      IsLetter(char)
 0001:00004460      IsLogicKey
 0001:00019297      IsNumber(char)
 0001:00004495      KeyChanged
 0001:00007321      KeyboardAnalyse
 0001:0000738B      KeyboardAnalyseSimple
 0001:0000725B      KeyboardIn(int,char*)
 0001:000072C4      MidiAnalysis(int,unsigned char)
 0001:00013FC3      MidiOut(int,unsigned long,char)
 0001:00011AD3      MidiTimeFunc(unsigned int,unsigned int,unsigned long,unsigned long,unsigned long) __stdcall
 0001:000130AA      MutaborTag(GisReadArtHead*,GisToken*,int)
 0001:000042C2      NRT_Play()
 0001:00014667      Name2Key(const char*)
 0001:00013F78      NeedsRealTime()
 0001:00013E08      NextRouteId()
 0001:0001500C      NextSequenz()
 0001:00015021      Note(char*,char*,int,frac)
 0001:0001400D      NotesCorrect(int)
 0001:0001A098      OpenFile(const char*)
 0001:00013F0A      OutAddTime(frac)
 0001:00013EEB      OutClose()
 0002:00001B54      OutDevice::
 0001:00005C78      OutDevice::GetType() const
 0001:00005B48      OutDevice::NeedsRealTime()
 0001:00005B40      OutDevice::Panic()
 0001:00005328      OutDevice::~OutDevice()
 0002:00001B0C      OutGis::
 0001:00005BDC      OutGis::AddTime(frac)
 0001:00005BA8      OutGis::Close()
 0001:00005C18      OutGis::GetName()
 0001:00005C24      OutGis::GetType() const
 0001:000129D0      OutGis::Gis(GisToken*,char)
 0001:00005C08      OutGis::MidiOut(unsigned char*,char)
 0001:00005C00      OutGis::MidiOut(unsigned long,char)
 0001:00005BC4      OutGis::NoteOff(int,int,int,Route*,int)
 0001:00005BBC      OutGis::NoteOn(int,int,int,Route*,int,ChannelData*)
 0001:00005BCC      OutGis::NotesCorrect(int)
 0001:00005BA0      OutGis::Open()
 0001:00005C10      OutGis::Quite(Route*)
 0001:00005BD4      OutGis::Sustain(char,int)
 0001:00005D98      OutGis::~OutGis()
 0002:00001A7C      OutMidiFile::
 0001:00005B38      OutMidiFile::AddTime(frac)
 0001:00010F92      OutMidiFile::Close()
 0001:00005B50      OutMidiFile::GetName()
 0001:00005B5C      OutMidiFile::GetType() const
 0001:00005B30      OutMidiFile::Gis(GisToken*,char)
 0001:00011A29      OutMidiFile::MidiOut(unsigned char*,char)
 0001:000119C6      OutMidiFile::MidiOut(unsigned long,char)
 0001:0001155F      OutMidiFile::NoteOff(int,int,int,Route*,int)
 0001:000110FD      OutMidiFile::NoteOn(int,int,int,Route*,int,ChannelData*)
 0001:000116A6      OutMidiFile::NotesCorrect(int)
 0001:00010F7F      OutMidiFile::Open()
 0001:00011A6C      OutMidiFile::Quite(Route*)
 0001:000119C1      OutMidiFile::Sustain(char,int)
 0001:00005F5C      OutMidiFile::~OutMidiFile()
 0002:00001AC4      OutMidiPort::
 0001:00005B70      OutMidiPort::AddTime(frac)
 0001:0000E87C      OutMidiPort::Close()
 0001:00005B88      OutMidiPort::GetName()
 0001:00005B94      OutMidiPort::GetType() const
 0001:00005B68      OutMidiPort::Gis(GisToken*,char)
 0001:00005B78      OutMidiPort::MidiOut(unsigned char*,char)
 0001:000101DC      OutMidiPort::MidiOut(unsigned long,char)
 0001:00005B80      OutMidiPort::NeedsRealTime()
 0001:0000F754      OutMidiPort::NoteOff(int,int,int,Route*,int)
 0001:0000EA01      OutMidiPort::NoteOn(int,int,int,Route*,int,ChannelData*)
 0001:0000F95D      OutMidiPort::NotesCorrect(int)
 0001:0000E2B0      OutMidiPort::Open()
 0001:000103BD      OutMidiPort::Panic()
 0001:0001035C      OutMidiPort::Quite(Route*)
 0001:0001006F      OutMidiPort::Sustain(char,int)
 0001:00005EEC      OutMidiPort::~OutMidiPort()
 0001:00013EA6      OutNotesCorrect(int)
 0001:00013ECD      OutOpen()
 0001:0001A224      OwlMain(int,char**)
 0001:00004397      Panic
 0001:00003CB0      RWSTDGuard::~RWSTDGuard()
 0001:00011AE3      ReadDelta(unsigned char*,unsigned long*)
 0001:00010B04      ReadLength(ifstream&)
 0001:00019546      ReadLong(int)
 0001:0001A154      ReadNewLine()
 0001:00019895      ReadNote()
 0001:000195E6      ReadParaNumber()
 0001:000196C6      ReadParaStr()
 0001:00019797      ReadTag()
 0001:00016B3B      RemoveTag(TagListData**)
 0001:00005218      Route::~Route()
 0002:00001580      RtError::
 0001:00002A30      RtError::RtError(const RtError&)
 0001:00003D80      RtError::getMessage()
 0001:00003D74      RtError::getType()
 0001:00003D38      RtError::printMessage()
 0001:00003C14      RtError::~RtError()
 0002:0000159C      RtMidi::
 0001:000012BC      RtMidi::RtMidi()
 0001:00001355      RtMidi::error(RtError::Type)
 0001:00003D8C      RtMidi::~RtMidi()
 0002:0000155C      RtMidiIn::
 0001:000038FC      RtMidiIn::MidiMessage::~MidiMessage()
 0001:00001478      RtMidiIn::RtMidiIn()
 0001:00003FBC      RtMidiIn::RtMidiInData::~RtMidiInData()
 0001:00001596      RtMidiIn::cancelCallback()
 0001:00001EFA      RtMidiIn::closePort()
 0001:0000160B      RtMidiIn::getMessage(std::vector<unsigned char>*)
 0001:0000204B      RtMidiIn::getPortCount()
 0001:00002055      RtMidiIn::getPortName(unsigned int)
 0001:000015E1      RtMidiIn::ignoreTypes(bool,bool,bool)
 0001:00001C21      RtMidiIn::initialize()
 0001:00001D41      RtMidiIn::openPort(unsigned int)
 0001:00001ED4      RtMidiIn::openVirtualPort()
 0001:00001534      RtMidiIn::setCallback(void(*)(double,std::vector<unsigned char>*,void),void*)
 0001:000015D3      RtMidiIn::setQueueSizeLimit(unsigned int)
 0001:00001F28      RtMidiIn::~RtMidiIn()
 0002:00001538      RtMidiOut::
 0001:000017FF      RtMidiOut::RtMidiOut()
 0001:00002671      RtMidiOut::closePort()
 0001:0000223A      RtMidiOut::getPortCount()
 0001:00002244      RtMidiOut::getPortName(unsigned int)
 0001:00002429      RtMidiOut::initialize()
 0001:00002511      RtMidiOut::openPort(unsigned int)
 0001:0000269A      RtMidiOut::openVirtualPort()
 0001:000027BF      RtMidiOut::sendMessage(std::vector<unsigned char>*)
 0001:000026C0      RtMidiOut::~RtMidiOut()
 0001:00019350      SavePos()
 0001:00004711      ScanDevices
 0001:000045D0      SetAktuellesKeyboardInstrument
 0001:000045B0      SetChannels
 0001:00010CBF      StartCurrentTime()
 0001:00014AAD      StartSep()
 0001:00004290      Stop
 0001:00010CE2      StopCurrentTime()
 0001:00004669      Str2DT(char*)
 0001:000046B5      Str2RT(char*)
 0001:000172E6      StrCmp(const char*,const char*)
 0001:00000156      System::::GetTls() __fastcall
 0001:0000608C      TArray<unsigned char>::~TArray<unsigned char>()
 0001:00006340      TArrayAsVector<unsigned char>::~TArrayAsVector<unsigned char>()
 0001:000066E4      TArrayAsVectorImp<TMCVectorImp<unsigned char,TStandardAllocator>,unsigned char>::~TArrayAsVectorImp<TMCVectorImp<unsigned char,TStandardAllocator>,unsigned char>()
 0001:000065E8      TDArrayAsVectorImp<TMCVectorImp<unsigned char,TStandardAllocator>,unsigned char>::~TDArrayAsVectorImp<TMCVectorImp<unsigned char,TStandardAllocator>,unsigned char>()
 0001:000064DC      TMArrayAsVector<unsigned char,TStandardAllocator>::~TMArrayAsVector<unsigned char,TStandardAllocator>()
 0002:00001A5C      TMCVectorImp<unsigned char,TStandardAllocator>::
 0001:00005480      TMCVectorImp<unsigned char,TStandardAllocator>::Add(const unsigned char&)
 0001:00005B18      TMCVectorImp<unsigned char,TStandardAllocator>::Count() const
 0001:000054C4      TMCVectorImp<unsigned char,TStandardAllocator>::Find(const unsigned char&) const
 0001:00005B24      TMCVectorImp<unsigned char,TStandardAllocator>::GetDelta() const
 0001:00005B0C      TMCVectorImp<unsigned char,TStandardAllocator>::Top() const
 0001:00005CF0      TMCVectorImp<unsigned char,TStandardAllocator>::~TMCVectorImp<unsigned char,TStandardAllocator>()
 0002:00001A40      TMVectorImp<unsigned char,TStandardAllocator>::
 0001:00005D48      TMVectorImp<unsigned char,TStandardAllocator>::~TMVectorImp<unsigned char,TStandardAllocator>()
 0001:000044B7      TSChanged
 0001:00005CD0      TStandardAllocator::operator delete(void*)
 0001:00005CE0      TStandardAllocator::operator delete[](void*)
 0002:00001A24      TVectorImpBase<unsigned char,TStandardAllocator>::
 0001:00005A00      TVectorImpBase<unsigned char,TStandardAllocator>::Count() const
 0001:00005A0C      TVectorImpBase<unsigned char,TStandardAllocator>::GetDelta() const
 0001:00005528      TVectorImpBase<unsigned char,TStandardAllocator>::Resize(unsigned int,unsigned int)
 0001:000059F4      TVectorImpBase<unsigned char,TStandardAllocator>::Top() const
 0001:00005A14      TVectorImpBase<unsigned char,TStandardAllocator>::Zero(unsigned int,unsigned int)
 0001:000062EC      TVectorImpBase<unsigned char,TStandardAllocator>::~TVectorImpBase<unsigned char,TStandardAllocator>()
 0001:00015148      Tag(char*)
 0001:00015182      TagParaInt(long)
 0001:0001522F      TagParaReal(double)
 0001:000152EC      TagParaStr(char*)
 0001:00010D55      Track::Save(ofstream&)
 0001:00010CF2      Track::WriteDelta()
 0001:00006438      Track::~Track()
 0001:00015453      UnRavel()
 0001:00003E84      WinMidiData::~WinMidiData()
 0001:00010B43      WriteLength(ofstream&,unsigned long)
 0002:00005734      _ArticulationHold
 0002:00005739      _ArticulationOff
 0003:0004EABC      _BracketDeep
 0003:0004EAC0      _Brackets
 0002:00004E40      _Cd
 0003:00048E54      _CompDiaLine
 0003:0004C740      _Current
 0003:0004C734      _CurrentId
 0003:0004EF84      _CurrentLine
 0003:0004F36C      _CurrentPos
 0003:0004C738      _CurrentSep
 0003:0004C72C      _CurrentTime
 0003:0004C730      _CurrentTimeId
 0002:00005D7F      _DelimitChars
 0002:00006CA0      _DocTemplateStaticHead
 0003:0004F370      _Eof
 0002:00001BC8      _Error_text
 0003:0004F374      _File
 0003:0004AD4C      _Fmeldung
 0003:0004C76C      _GspCurrentLineNr
 0003:0004C77C      _GspError
 0003:0004C778      _GspErrorLine
 0003:0004C770      _GspErrorLineNr
 0003:0004C774      _GspErrorPos
 0002:00006954      _GspErrorText
 0002:00004F8C      _InDevChanged
 0002:00004F88      _InDevices
 0003:0004EAB5      _Komma
 0003:0004C764      _LastDuration
 0003:0004C760      _LastOctave
 0003:0004C744      _LastOpenBracket
 0003:0004C748      _LastOpenRange
 0003:0004C75C      _LastPara
 0003:0004EB88      _LastTag
 0002:00006C9C      _Module
 0003:0004C728      _NRT_Speed
 0003:0004EAB8      _NumberLength
 0001:0001A24C      _OWLInitUserDLL
 0002:00004F84      _OutDevices
 0003:0004C758      _Para
 0003:0004EAB4      _ParaMode
 0003:0004C788      _PossibleErrorLine
 0003:0004C780      _PossibleErrorLineNr
 0003:0004C784      _PossibleErrorPos
 0002:000015D4      _RTName
 0002:000015C0      _RealTime
 0003:0004C73C      _Root
 0002:00004F90      _RouteIds
 0002:00002CB4      _SeRiEnNuMmEr
 0003:0004CB70      _Sep
 0002:00005D7C      _SepChars
 0003:0004EAB0      _SepPos
 0003:0004C74C      _TagMode
 0003:0004C750      _TagName
 0003:0004C754      _TagSep
 0002:0000506C      _TagShorts
 0002:00004F9C      _Tags
 0002:00001D14      _Warning_text
 0002:00006E64      __DebuggerHookData
 0001:0001A5DF      __ExceptInit
 0002:00006E60      __ExceptVarsSize
 0001:000000A3      __GetExceptDLLinfo
 0001:0001A67A      __GetExceptDLLinfoInternal
 0001:0001A5C0      __GetPolymorphicDTC(void*,unsigned int)
 0002:0000007B      __TLS_index
 0002:0000007F      __TLS_index4
 0002:000000DC      ___CPPdebugHook
 0002:00006D7C      ___CPPexceptionList
 0002:00006DAC      ___ExceptStaticXbuff
 0001:00000156      ___System__GetTls
 0001:0001A46E      ___call_terminate
 0001:0001A54E      ___call_unexpected
 0002:00006D8C      ___debuggerHookDataP
 0002:00006D84      ___debuggerHookFN
 0002:00006D88      ___debuggerWatchingP
 0002:00006D80      ___exceptFlags
 0002:00006DA8      ___exceptMemAllocVars
 0002:00006DA4      ___exceptStaticBuffP
 0002:00000078      ___isDLL
 0002:0000007A      ___isGUI
 0002:00006D90      ___terminatePTR
 0002:00006DA0      ___throwExceptionName
 0002:00006D98      ___throwFileName
 0002:00006D9C      ___throwLineNumber
 0002:00006D94      ___unexpectdPTR
 0002:00000079      ___useDynamicTLS
 0004:00000000      ___xxInfo
 0001:00000000      __acrtused
 0001:000000B0      __getHInstance
 0002:00000083      __hInstance
 0001:000000A8      __isDLL
 0001:0001A898      __pure_error_
 0001:000190D8      __tpdsc__[ChordNote*]
 0001:000191C8      __tpdsc__[ChordNote]
 0001:000157B8      __tpdsc__[GisComma*]
 0001:000157D0      __tpdsc__[GisComma]
 0001:000156C8      __tpdsc__[GisNote*]
 0001:00015AC0      __tpdsc__[GisNote]
 0001:00015764      __tpdsc__[GisParaInt*]
 0001:000158CC      __tpdsc__[GisParaInt]
 0001:00015780      __tpdsc__[GisParaReal*]
 0001:00015878      __tpdsc__[GisParaReal]
 0001:0001579C      __tpdsc__[GisParaStr*]
 0001:00015824      __tpdsc__[GisParaStr]
 0001:000137F0      __tpdsc__[GisReadArtHead*]
 0001:00013920      __tpdsc__[GisReadArtHead]
 0001:00013DEC      __tpdsc__[GisReadHead*]
 0001:00013A44      __tpdsc__[GisReadHead]
 0001:000156F8      __tpdsc__[GisSegment*]
 0001:00015A1C      __tpdsc__[GisSegment]
 0001:00015714      __tpdsc__[GisSequenz*]
 0001:000159C8      __tpdsc__[GisSequenz]
 0001:000156E0      __tpdsc__[GisTag*]
 0001:00015730      __tpdsc__[GisTagBegin*]
 0001:00015974      __tpdsc__[GisTagBegin]
 0001:0001574C      __tpdsc__[GisTagEnd*]
 0001:00015920      __tpdsc__[GisTagEnd]
 0001:00015A70      __tpdsc__[GisTag]
 0001:00013DD4      __tpdsc__[GisToken*]
 0001:00013978      __tpdsc__[GisToken]
 0001:000053A8      __tpdsc__[GisWriteHead*]
 0001:000058C0      __tpdsc__[GisWriteHead]
 0001:00005C80      __tpdsc__[InDevice]
 0001:00005420      __tpdsc__[InGis*]
 0001:00005760      __tpdsc__[InGis]
 0001:00005450      __tpdsc__[InMidiFile*]
 0001:000056B8      __tpdsc__[InMidiFile]
 0001:00005434      __tpdsc__[InMidiPort*]
 0001:0000570C      __tpdsc__[InMidiPort]
 0001:00005C30      __tpdsc__[OutDevice]
 0001:00005390      __tpdsc__[OutGis*]
 0001:0000590C      __tpdsc__[OutGis]
 0001:000053E0      __tpdsc__[OutMidiFile*]
 0001:00005810      __tpdsc__[OutMidiFile]
 0001:000053C4      __tpdsc__[OutMidiPort*]
 0001:0000586C      __tpdsc__[OutMidiPort]
 0001:0000299C      __tpdsc__[RWSTDGuard]
 0001:0000546C      __tpdsc__[Route*]
 0001:00005674      __tpdsc__[Route]
 0001:00003D20      __tpdsc__[RtError*]
 0001:000029E4      __tpdsc__[RtError]
 0001:00002984      __tpdsc__[RtMidi*]
 0001:00002ABC      __tpdsc__[RtMidiIn*]
 0001:00002AD4      __tpdsc__[RtMidiIn::MidiMessage*]
 0001:0000376C      __tpdsc__[RtMidiIn::MidiMessage]
 0001:00003E28      __tpdsc__[RtMidiIn::RtMidiInData]
 0001:00003BB8      __tpdsc__[RtMidiIn]
 0001:00002AF8      __tpdsc__[RtMidiOut*]
 0001:00003B64      __tpdsc__[RtMidiOut]
 0001:00003CD4      __tpdsc__[RtMidi]
 0001:000053FC      __tpdsc__[TArray<unsigned char>*]
 0001:000057B0      __tpdsc__[TArray<unsigned char>]
 0001:00006110      __tpdsc__[TArrayAsVector<unsigned char>]
 0001:00006650      __tpdsc__[TArrayAsVectorImp<TMCVectorImp<unsigned char,TStandardAllocator>,unsigned char>]
 0001:0000654C      __tpdsc__[TDArrayAsVectorImp<TMCVectorImp<unsigned char,TStandardAllocator>,unsigned char>]
 0001:000063BC      __tpdsc__[TMArrayAsVector<unsigned char,TStandardAllocator>]
 0001:00005A94      __tpdsc__[TMCVectorImp<unsigned char,TStandardAllocator>]
 0001:00005A1C      __tpdsc__[TMVectorImp<unsigned char,TStandardAllocator>]
 0001:00006744      __tpdsc__[TModule]
 0001:0000631C      __tpdsc__[TStandardAllocator]
 0001:00006794      __tpdsc__[TStreamableBase]
 0001:000054E8      __tpdsc__[TVectorImpBase<unsigned char,TStandardAllocator>*]
 0001:000055F8      __tpdsc__[TVectorImpBase<unsigned char,TStandardAllocator>]
 0001:00006048      __tpdsc__[Track]
 0001:00002B10      __tpdsc__[WinMidiData*]
 0001:00003B14      __tpdsc__[WinMidiData]
 0001:00012884      __tpdsc__[filebuf]
 0001:000127D8      __tpdsc__[fstreambase]
 0001:0001A1DC      __tpdsc__[ifstream*]
 0001:0001276C      __tpdsc__[ifstream]
 0001:00003AD4      __tpdsc__[ios]
 0001:00012834      __tpdsc__[istream]
 0001:00012700      __tpdsc__[ofstream]
 0001:00003A84      __tpdsc__[ostream]
 0001:00002B2C      __tpdsc__[ostrstream]
 0001:00002C20      __tpdsc__[std::basic_string<char,std::string_char_traits<char>>*]
 0001:00002B98      __tpdsc__[std::basic_string<char,std::string_char_traits<char>>]
 0001:000040DC      __tpdsc__[std::deque<RtMidiIn::MidiMessage>]
 0001:0000400C      __tpdsc__[std::queue<RtMidiIn::MidiMessage>]
 0001:00003954      __tpdsc__[std::vector<unsigned char>]
 0001:00003F74      __tpdsc__[streambuf]
 0001:0001A3B8      __tpdsc__[string]
 0001:00003A24      __tpdsc__[strstreambase]
 0001:00003EE8      __tpdsc__[strstreambuf]
 0001:0001A3A4      __tpdsc__[xmsg&]
 0001:0001A3FC      __tpdsc__[xmsg] const
 0002:00006EDC      __turboFloat
 0003:0004EB90      _accedentials
 0002:00002C08      _aktionen_ausgabezeile
 0002:00002B64      _aktuelles_keyboard_instrument
 0002:00002B60      _aktuelles_midi_instrument
 0003:0004C71C      _anzahl_eingelesene_zeichen
 0003:0004A690      _boxAktionen
 0003:0004EF78      _duration
 0003:0004AF10      _first_harmonie
 0003:0004B714      _first_keyboard
 0003:0004B710      _first_lokal_harmonie
 0003:0004BF14      _first_lokal_keyboard
 0003:0004C718      _first_lokal_midi
 0003:0004BF18      _first_midi
 0002:00002B58      _freies_tonsystem
 0003:0004A884      _keys_changed
 0003:0004A6F4      _lAktionen
 0002:00004CB8      _lMidiCode
 0003:00000020      _last
 0003:0004B310      _last_global_harmonie
 0003:0004BB14      _last_global_keyboard
 0003:0004C318      _last_global_midi
 0003:00048154      _last_note_id
 0003:00000024      _last_tonsystem
 0003:00012C24      _lauf_instrument
 0003:00048554      _laufzeit_abstand
 0002:00002B5C      _laufzeit_meldungen_erlaubt
 0003:00048954      _laufzeit_zentrum
 0003:00037D54      _liegende_tasten
 0003:00047D54      _liegende_tasten_max
 0003:0004AEA8      _list_of_config_instrumente
 0003:0004AE9C      _list_of_harmonien
 0003:0004AEA4      _list_of_instrumente
 0003:0004AE8C      _list_of_intervalle
 0003:0004AEA0      _list_of_logiken
 0003:0004AE90      _list_of_toene
 0003:0004AE94      _list_of_tonsysteme
 0003:0004AE98      _list_of_umstimmungen
 0003:0004EF80      _minus
 0002:00002C0C      _nAktionen
 0003:0004C724      _nData
 0003:0004EB8C      _octave
 0003:0004C720      _pData
 0003:00012C28      _pattern
 0002:00002C04      _protokoll_ausgabezeile
 0003:00048E58      _protokoll_string
 0002:00002A24      _protokollfunktion_aktionsausgabe
 0002:00002A20      _protokollfunktionen_aktiv
 0003:0004AEC4      _quelldatei
 0003:00049308      _sAktionen
 0003:0004AC84      _sd1
 0003:0004ACE8      _sd2
 0002:0000452C      _start_parameter_liste
 0003:00048D54      _tempstring
 0003:0004AEAC      _ton_ohne_namen
 0003:00037954      _tonsystem
 0002:00002A2C      _tonsystem_init
 0003:00024C28      _tonsystem_memory
 0001:0001A6F4      _vector_new_ldtc_(void*,unsigned int,unsigned int,unsigned int,void*,unsigned int,void*)
 0003:00000000      _weiter_gehts_nach_compilerfehler
 0003:0004AE64      _yychar
 0003:0004AE70      _yylloc
 0003:0004AE68      _yylval
 0003:0004AE88      _yynerrs
 0002:00002A28      _zeige_aktuelles_tonsystem
 0001:00014034      abs(const long)
 0001:00009A20      allgemeine_initialisierungen()
 0001:00009B54      argument_list_laenge(argument_liste*)
 0001:000081D4      berechne_intervalle_absolut(intervall*)
 0001:00007940      calc_declaration_numbers(char)
 0001:00006C4B      change_anker(int,int)
 0001:00006D65      change_breite(int,int)
 0001:00008322      check_komplex_intervall(komplex_intervall*,char*)
 0001:00006F12      compare_harmonie(int,int,PTRN*,PTRN*)
 0001:00007AB0      compiler_warning(int,...)
 0001:0000A7E7      eintrage_parameterliste_in_umstimmung()
 0001:0000B455      enthalten_in_tastenliste(int,taste*)
 0001:000068C8      execute_aktion(int,do_aktion*)
 0001:00007B66      exit_laufzeit_protokoll()
 0001:0000CA3A      expand_pattern(char*)
 0001:00007A72      fatal_error(int,...)
 0001:0000C0F6      fprint_argument(FILE*,argument*)
 0001:00014562      frac::gcd(long,long)
 0001:00014492      frac::operator !=(const frac&)
 0001:00014332      frac::operator *(const frac)
 0001:00014178      frac::operator *=(const frac&)
 0001:00014206      frac::operator +(const frac)
 0001:00014057      frac::operator +=(const frac&)
 0001:0001429C      frac::operator -(const frac)
 0001:000140E8      frac::operator -=(const frac&)
 0001:00014385      frac::operator /(const frac)
 0001:000141BF      frac::operator /=(const frac&)
 0001:000143D8      frac::operator <(const frac&)
 0001:00014425      frac::operator <=(const frac&)
 0001:00014042      frac::operator =(const frac&)
 0001:0001454C      frac::operator =(const int&)
 0001:00014472      frac::operator ==(const frac&)
 0001:000144FF      frac::operator >(const frac&)
 0001:000144B2      frac::operator >=(const frac&)
 0001:0000AF01      get_ausloeser_default()
 0001:0000AF1E      get_ausloeser_harmonie()
 0001:0000AF64      get_ausloeser_harmonie_form()
 0001:0000AFEE      get_ausloeser_midi_in()
 0001:0000AFAC      get_ausloeser_taste(char*)
 0001:00009C54      get_harmonie(char*,harmonie*)
 0001:0000AECC      get_harmoniebezeichner(int,char*,int)
 0001:0000B0F6      get_instrument_dekl(int,int,int,int,instrument**)
 0001:00009BB2      get_intervall(char*,intervall*)
 0001:0000C044      get_komplex_faktor(komplex_intervall*)
 0001:0000C0B8      get_komplex_frequenz(ton*)
 0001:0000B025      get_last_anweisungs_liste()
 0001:0000AEF7      get_last_ausloeser()
 0001:00009F62      get_last_komplex_intervall()
 0001:00009C8A      get_logik(char*,logik*)
 0001:00009AEF      get_logik_nummer(char*,logik*)
 0001:00009E8C      get_new_aktion_aufruf_element(char*)
 0001:00009ED1      get_new_aktion_midi_out_element()
 0001:0000B02F      get_new_anweisung()
 0001:00009F22      get_new_faktor_anteil(double,char*)
 0001:0000AE69      get_new_harmonie(char*,int)
 0001:00009CCC      get_new_integer_in_integersequenz(int)
 0001:0000A3C9      get_new_intervall(char*,double)
 0001:0000A45D      get_new_intervall_komplex(char*)
 0001:0000B06D      get_new_logik(char*,char*)
 0001:00009E34      get_new_name_in_argument_list(char*)
 0001:00009D14      get_new_name_in_parameterlist(char*)
 0001:00009DF6      get_new_number_in_argument_list(double)
 0001:0000AE2F      get_new_taste(int,char)
 0001:0000A4C0      get_new_ton_absolut(char*,double)
 0001:0000A630      get_new_ton_in_tonsystem(char*)
 0001:0000A590      get_new_ton_komplex_negative(char*,char*)
 0001:0000A525      get_new_ton_komplex_positive(char*,char*)
 0001:0000A662      get_new_tonsystem(char*,int)
 0001:0000A6CF      get_new_tonsystem_negative(char*,int)
 0001:0000A9B0      get_new_umstimm_expression(char*)
 0001:0000AA45      get_new_umstimm_expression_negative(char*)
 0001:0000A9F9      get_new_umstimm_expression_positive(char*)
 0001:0000A7C7      get_new_umstimmung()
 0001:00009B71      get_ton(char*,ton*)
 0001:00009C1E      get_umstimmung(char*,umstimmung*)
 0001:0000A8CE      get_umstimmung_breite_abs(argument_typ,double,char*)
 0001:0000A935      get_umstimmung_breite_rel(argument_typ,double,char*,char)
 0001:0000AE04      get_umstimmung_midi_out()
 0001:0000A7FA      get_umstimmung_taste_abs(argument_typ,double,char*)
 0001:0000A85F      get_umstimmung_taste_rel(argument_typ,double,char*,char)
 0001:0000AAA1      get_umstimmung_tonhoehe_veraendert()
 0001:0000AD2F      get_umstimmung_umstimm_case_parameter(char*)
 0001:0000AC88      get_umstimmung_umstimm_case_zahl(int)
 0001:0000AB7F      get_umstimmung_umstimmungs_bund()
 0001:0000AAC1      get_umstimmung_wiederholung_abs()
 0001:0000AAE0      get_umstimmung_wiederholung_abs_negative()
 0001:0000AB47      get_umstimmung_wiederholung_rel_negative()
 0001:0000AB28      get_umstimmung_wiederholung_rel_positive()
 0001:0000AC39      get_umstimmungs_case_default_element()
 0001:0000ABF7      get_umstimmungs_case_zahl_element(int)
 0001:00007FE4      get_wert_komplex_intervall(komplex_intervall*)
 0001:00006ED7      hoechste_taste(int)
 0001:00009E80      init_aktions_liste()
 0001:0000B019      init_anweisungs_liste()
 0001:00009DEA      init_argument_liste()
 0001:0000AEEB      init_ausloeser()
 0001:00009CC0      init_integersequenz()
 0001:00009F16      init_komplex_ton_list()
 0001:00007B48      init_laufzeit_protokoll()
 0001:00007F3B      init_laufzeit_speicher()
 0001:00009D08      init_parameter_liste()
 0001:00007E98      init_syntax_speicher()
 0001:0000AE23      init_tastenliste()
 0001:0000A624      init_ton_liste()
 0001:0000A9A4      init_umstimm_expression_list()
 0001:0000A767      init_umstimmung(char*)
 0001:0000AC7C      init_umstimmungs_case_liste()
 0001:00009A04      init_yylex()
 0001:0000CAB3      insert_in_globale_liste(int,logik*)
 0001:0000CC99      insert_in_lokale_liste(int,anweisung*,char*)
 0001:00007C28      intern_fgetc(FILE*)
 0001:00007C4D      intern_ungetc(int,FILE*)
 0001:00008054      intervall_list_laenge(intervall*)
 0001:00007378      keyboard_analyse(int)
 0001:00007AEF      laufzeit_message(char*)
 0001:00007B6B      laufzeit_protokoll(char*,...)
 0001:00007F45      loesche_laufzeit_speicher()
 0001:00007E63      loesche_syntax_speicher()
 0001:00009AB5      logik_list_laenge(logik*)
 0001:00009AD2      midi_list_laenge(midiliste*)
 0001:0000A07B      mutabor_programm_einlesen(char*)
 0001:0000D06B      mutabor_tabellen_generator()
 0001:0001076E      mycallback(double,std::vector<unsigned char>*,void)
 0001:000145BB      operator <<(ostream&,const frac)
 0001:00009B37      parameter_list_laenge(parameter_liste*)
 0001:00009BE8      parser_get_tonsystem(char*,tonsystem*)
 0001:00009DAC      print_argumentliste(argument_liste*)
 0001:0000A2EB      print_integersequenz(midiliste*)
 0001:00007638      protokoll_aktuelle_relationen(int)
 0001:000073CC      protokoll_aktuelles_tonsystem(int)
 0001:000074E0      protokoll_liegende_frequenzen(int)
 0001:000076CC      protokoll_liegende_relationen(int)
 0001:0001A446      set_terminate(void(*)())
 0001:0001A526      set_unexpected(void(*)())
 0001:00009F6C      setze_nummer_von_abstand_und_zentrum()
 0001:00007A23      show_line_number(int)
 0001:000039AC      std::basic_string<char,std::string_char_traits<char>>::~string_char_traits<char>>()
 0001:000038D8      std::copy(RtMidiIn::MidiMessage**,t,...
 0001:00003898      std::copy(const unsigned char*,const unsigned char*,unsigned char*)
 0001:00002C7C      std::copy(std::vector<bool>::const_iterator,std::vector<bool>::iterator)
 0001:00002D80      std::copy(std::vector<bool>::iterator,std::vector<bool>::iterator)
 0001:00003878      std::copy(unsigned char*,unsigned char*,unsigned char*)
 0001:00002E84      std::copy_backward(std::vector<bool>::iterator,std::vector<bool>::iterator)
 0001:000038B8      std::copy_backward(unsigned char*,unsigned char*,unsigned char*)
 0001:00003440      std::deque<RtMidiIn::MidiMessage>::allocate_at_end()
 0001:000036D0      std::deque<RtMidiIn::MidiMessage>::deallocate_at_begin()
 0001:00003334      std::deque<RtMidiIn::MidiMessage>::~MidiMessage>()
 0001:00003830      std::destroy(unsigned char*,unsigned char*)
 0001:00002F44      std::fill(std::vector<bool>::iterator,const bool&)
 0001:00002FDC      std::fill_n(std::vector<bool>::iterator,const bool&)
 0001:0000D18C      std::operator <<(ostream&,const std::basic_string<char,std::string_char_traits<char>>&)
 0001:00000198      std::operator <<(ostream&,const std::basic_string<char,std::string_char_traits<char>>&)
 0001:0000D184      std::operator >>(istream&,std::basic_string<char,std::string_char_traits<char>>&)
 0001:00000190      std::operator >>(istream&,std::basic_string<char,std::string_char_traits<char>>&)
 0001:00004094      std::queue<RtMidiIn::MidiMessage>::~MidiMessage>()
 0001:0000D284      std::swap(std::vector<bool>::reference)
 0001:00000290      std::swap(std::vector<bool>::reference)
 0001:000037FC      std::uninitialized_copy(const unsigned char*,const unsigned char*,unsigned char*)
 0001:00003844      std::uninitialized_copy(unsigned char*,unsigned char*,unsigned char*)
 0001:000037C8      std::uninitialized_fill_n(unsigned char*,unsigned int,const unsigned char&)
 0001:0000D194      std::vector<bool>::flip()
 0001:000001A0      std::vector<bool>::flip()
 0001:0000D63D      std::vector<bool>::insert(std::vector<bool>::iterator,const bool&)
 0001:00000649      std::vector<bool>::insert(std::vector<bool>::iterator,const bool&)
 0001:0000DB40      std::vector<bool>::insert(std::vector<bool>::iterator,short,...
 0001:00000B4C      std::vector<bool>::insert(std::vector<bool>::iterator,short,...
 0001:0000D2D5      std::vector<bool>::insert_aux(std::vector<bool>::iterator,...
 0001:000002E1      std::vector<bool>::insert_aux(std::vector<bool>::iterator,...
 0001:0000E0AE      std::vector<bool>::resize(unsigned int,bool)
 0001:000010BA      std::vector<bool>::resize(unsigned int,bool)
 0001:00003198      std::vector<unsigned char>::insert(unsigned char*,const unsigned char*,const unsigned char*)
 0001:00003078      std::vector<unsigned char>::insert_aux(unsigned char*,const unsigned char&)
 0001:00003F40      std::vector<unsigned char>::~vector<unsigned char>()
 0001:00014716      strdupchr(char)
 0001:0001A440      terminate()
 0001:00006E99      tiefste_taste(int)
 0001:00009A5E      ton_list_laenge(ton*)
 0001:00009A7B      tonsystem_list_laenge(tonsystem*)
 0001:00009A98      umstimmungs_list_laenge(umstimmung*)
 0001:0001A520      unexpected()
 0001:00006BEF      update_pattern(int)
 0001:0000B0D6      vervollstaendige_logik()
 0001:00007C71      xalloca(unsigned int)
 0001:00007E24      xcalloc(unsigned int,unsigned int)
 0001:00007C8F      xde_alloca(void*)
 0001:00007C9D      xfree(void*)
 0001:00007CA2      xmalloc(unsigned int)
 0001:00007DA7      xrealloc(void*,unsigned int)
 0001:00007F0C      ycalloc(unsigned int,unsigned int)
 0001:00007EA2      yfree(void*)
 0001:00007EA7      ymalloc(unsigned int)
 0001:00007EE8      yrealloc(void*,unsigned int)
 0001:00009A18      yyerror(char*)
 0001:00009680      yylex()
 0001:00008380      yyparse()

  Address         Publics by Value

 0001:00000000      __acrtused
 0001:00000000      @C1_0
 0001:000000A3      __GetExceptDLLinfo
 0001:000000A8      __isDLL
 0001:000000B0      __getHInstance
 0001:00000156      System::::GetTls() __fastcall
 0001:00000156      ___System__GetTls
 0001:00000190      std::operator >>(istream&,std::basic_string<char,std::string_char_traits<char>>&)
 0001:00000190      @C2_0
 0001:00000198      std::operator <<(ostream&,const std::basic_string<char,std::string_char_traits<char>>&)
 0001:000001A0      std::vector<bool>::flip()
 0001:00000290      std::swap(std::vector<bool>::reference)
 0001:000002E1      std::vector<bool>::insert_aux(std::vector<bool>::iterator,...
 0001:00000649      std::vector<bool>::insert(std::vector<bool>::iterator,const bool&)
 0001:00000B4C      std::vector<bool>::insert(std::vector<bool>::iterator,short,...
 0001:000010BA      std::vector<bool>::resize(unsigned int,bool)
 0001:000012BC      RtMidi::RtMidi()
 0001:00001355      RtMidi::error(RtError::Type)
 0001:00001478      RtMidiIn::RtMidiIn()
 0001:00001534      RtMidiIn::setCallback(void(*)(double,std::vector<unsigned char>*,void),void*)
 0001:00001596      RtMidiIn::cancelCallback()
 0001:000015D3      RtMidiIn::setQueueSizeLimit(unsigned int)
 0001:000015E1      RtMidiIn::ignoreTypes(bool,bool,bool)
 0001:0000160B      RtMidiIn::getMessage(std::vector<unsigned char>*)
 0001:000017FF      RtMidiOut::RtMidiOut()
 0001:00001C21      RtMidiIn::initialize()
 0001:00001D41      RtMidiIn::openPort(unsigned int)
 0001:00001ED4      RtMidiIn::openVirtualPort()
 0001:00001EFA      RtMidiIn::closePort()
 0001:00001F28      RtMidiIn::~RtMidiIn()
 0001:0000204B      RtMidiIn::getPortCount()
 0001:00002055      RtMidiIn::getPortName(unsigned int)
 0001:0000223A      RtMidiOut::getPortCount()
 0001:00002244      RtMidiOut::getPortName(unsigned int)
 0001:00002429      RtMidiOut::initialize()
 0001:00002511      RtMidiOut::openPort(unsigned int)
 0001:00002671      RtMidiOut::closePort()
 0001:0000269A      RtMidiOut::openVirtualPort()
 0001:000026C0      RtMidiOut::~RtMidiOut()
 0001:000027BF      RtMidiOut::sendMessage(std::vector<unsigned char>*)
 0001:00002984      __tpdsc__[RtMidi*]
 0001:0000299C      __tpdsc__[RWSTDGuard]
 0001:000029E4      __tpdsc__[RtError]
 0001:00002A30      RtError::RtError(const RtError&)
 0001:00002ABC      __tpdsc__[RtMidiIn*]
 0001:00002AD4      __tpdsc__[RtMidiIn::MidiMessage*]
 0001:00002AF8      __tpdsc__[RtMidiOut*]
 0001:00002B10      __tpdsc__[WinMidiData*]
 0001:00002B2C      __tpdsc__[ostrstream]
 0001:00002B98      __tpdsc__[std::basic_string<char,std::string_char_traits<char>>]
 0001:00002C20      __tpdsc__[std::basic_string<char,std::string_char_traits<char>>*]
 0001:00002C7C      std::copy(std::vector<bool>::const_iterator,std::vector<bool>::iterator)
 0001:00002D80      std::copy(std::vector<bool>::iterator,std::vector<bool>::iterator)
 0001:00002E84      std::copy_backward(std::vector<bool>::iterator,std::vector<bool>::iterator)
 0001:00002F44      std::fill(std::vector<bool>::iterator,const bool&)
 0001:00002FDC      std::fill_n(std::vector<bool>::iterator,const bool&)
 0001:00003078      std::vector<unsigned char>::insert_aux(unsigned char*,const unsigned char&)
 0001:00003198      std::vector<unsigned char>::insert(unsigned char*,const unsigned char*,const unsigned char*)
 0001:00003334      std::deque<RtMidiIn::MidiMessage>::~MidiMessage>()
 0001:00003440      std::deque<RtMidiIn::MidiMessage>::allocate_at_end()
 0001:000036D0      std::deque<RtMidiIn::MidiMessage>::deallocate_at_begin()
 0001:0000376C      __tpdsc__[RtMidiIn::MidiMessage]
 0001:000037C8      std::uninitialized_fill_n(unsigned char*,unsigned int,const unsigned char&)
 0001:000037FC      std::uninitialized_copy(const unsigned char*,const unsigned char*,unsigned char*)
 0001:00003830      std::destroy(unsigned char*,unsigned char*)
 0001:00003844      std::uninitialized_copy(unsigned char*,unsigned char*,unsigned char*)
 0001:00003878      std::copy(unsigned char*,unsigned char*,unsigned char*)
 0001:00003898      std::copy(const unsigned char*,const unsigned char*,unsigned char*)
 0001:000038B8      std::copy_backward(unsigned char*,unsigned char*,unsigned char*)
 0001:000038D8      std::copy(RtMidiIn::MidiMessage**,t,...
 0001:000038FC      RtMidiIn::MidiMessage::~MidiMessage()
 0001:00003954      __tpdsc__[std::vector<unsigned char>]
 0001:000039AC      std::basic_string<char,std::string_char_traits<char>>::~string_char_traits<char>>()
 0001:00003A24      __tpdsc__[strstreambase]
 0001:00003A84      __tpdsc__[ostream]
 0001:00003AD4      __tpdsc__[ios]
 0001:00003B14      __tpdsc__[WinMidiData]
 0001:00003B64      __tpdsc__[RtMidiOut]
 0001:00003BB8      __tpdsc__[RtMidiIn]
 0001:00003C14      RtError::~RtError()
 0001:00003CB0      RWSTDGuard::~RWSTDGuard()
 0001:00003CD4      __tpdsc__[RtMidi]
 0001:00003D20      __tpdsc__[RtError*]
 0001:00003D38      RtError::printMessage()
 0001:00003D74      RtError::getType()
 0001:00003D80      RtError::getMessage()
 0001:00003D8C      RtMidi::~RtMidi()
 0001:00003E28      __tpdsc__[RtMidiIn::RtMidiInData]
 0001:00003E84      WinMidiData::~WinMidiData()
 0001:00003EE8      __tpdsc__[strstreambuf]
 0001:00003F40      std::vector<unsigned char>::~vector<unsigned char>()
 0001:00003F74      __tpdsc__[streambuf]
 0001:00003FBC      RtMidiIn::RtMidiInData::~RtMidiInData()
 0001:0000400C      __tpdsc__[std::queue<RtMidiIn::MidiMessage>]
 0001:00004094      std::queue<RtMidiIn::MidiMessage>::~MidiMessage>()
 0001:000040DC      __tpdsc__[std::deque<RtMidiIn::MidiMessage>]
 0001:0000413C      Compile
 0001:0000413C      @C3_0
 0001:00004245      Activate
 0001:00004290      Stop
 0001:000042C2      NRT_Play()
 0001:00004337      InDeviceAction
 0001:00004397      Panic
 0001:000043B6      CheckNeedsRealTime
 0001:000043C0      GetMutTag
 0001:00004460      IsLogicKey
 0001:00004495      KeyChanged
 0001:000044B7      TSChanged
 0001:00004516      InDevicesChanged
 0001:00004531      GetInDevicesMode
 0001:00004556      GetChannels
 0001:000045B0      SetChannels
 0001:000045D0      SetAktuellesKeyboardInstrument
 0001:000045DF      GetAktuellesKeyboardInstrument
 0001:000045E9      GetLine(char**,char*)
 0001:00004669      Str2DT(char*)
 0001:000046B5      Str2RT(char*)
 0001:000046EE      GetOut(int)
 0001:00004711      ScanDevices
 0001:000051BB      GetTimerData
 0001:00005218      Route::~Route()
 0001:00005270      InDevice::~InDevice()
 0001:00005328      OutDevice::~OutDevice()
 0001:00005390      __tpdsc__[OutGis*]
 0001:000053A8      __tpdsc__[GisWriteHead*]
 0001:000053C4      __tpdsc__[OutMidiPort*]
 0001:000053E0      __tpdsc__[OutMidiFile*]
 0001:000053FC      __tpdsc__[TArray<unsigned char>*]
 0001:00005420      __tpdsc__[InGis*]
 0001:00005434      __tpdsc__[InMidiPort*]
 0001:00005450      __tpdsc__[InMidiFile*]
 0001:0000546C      __tpdsc__[Route*]
 0001:00005480      TMCVectorImp<unsigned char,TStandardAllocator>::Add(const unsigned char&)
 0001:000054C4      TMCVectorImp<unsigned char,TStandardAllocator>::Find(const unsigned char&) const
 0001:000054E8      __tpdsc__[TVectorImpBase<unsigned char,TStandardAllocator>*]
 0001:00005528      TVectorImpBase<unsigned char,TStandardAllocator>::Resize(unsigned int,unsigned int)
 0001:000055F8      __tpdsc__[TVectorImpBase<unsigned char,TStandardAllocator>]
 0001:00005674      __tpdsc__[Route]
 0001:000056B8      __tpdsc__[InMidiFile]
 0001:0000570C      __tpdsc__[InMidiPort]
 0001:00005760      __tpdsc__[InGis]
 0001:000057B0      __tpdsc__[TArray<unsigned char>]
 0001:00005810      __tpdsc__[OutMidiFile]
 0001:0000586C      __tpdsc__[OutMidiPort]
 0001:000058C0      __tpdsc__[GisWriteHead]
 0001:0000590C      __tpdsc__[OutGis]
 0001:0000595C      InDevice::NeedsRealTime()
 0001:00005964      InMidiFile::GetName()
 0001:00005970      InMidiFile::GetType() const
 0001:0000597C      InMidiFile::ReadOn(frac)
 0001:00005990      InMidiPort::Stop()
 0001:00005998      InMidiPort::Play()
 0001:000059A0      InMidiPort::Pause()
 0001:000059A8      InMidiPort::NeedsRealTime()
 0001:000059B0      InMidiPort::GetName()
 0001:000059BC      InMidiPort::GetType() const
 0001:000059C8      InMidiPort::ReadOn(frac)
 0001:000059DC      InGis::GetName()
 0001:000059E8      InGis::GetType() const
 0001:000059F4      TVectorImpBase<unsigned char,TStandardAllocator>::Top() const
 0001:00005A00      TVectorImpBase<unsigned char,TStandardAllocator>::Count() const
 0001:00005A0C      TVectorImpBase<unsigned char,TStandardAllocator>::GetDelta() const
 0001:00005A14      TVectorImpBase<unsigned char,TStandardAllocator>::Zero(unsigned int,unsigned int)
 0001:00005A1C      __tpdsc__[TMVectorImp<unsigned char,TStandardAllocator>]
 0001:00005A94      __tpdsc__[TMCVectorImp<unsigned char,TStandardAllocator>]
 0001:00005B0C      TMCVectorImp<unsigned char,TStandardAllocator>::Top() const
 0001:00005B18      TMCVectorImp<unsigned char,TStandardAllocator>::Count() const
 0001:00005B24      TMCVectorImp<unsigned char,TStandardAllocator>::GetDelta() const
 0001:00005B30      OutMidiFile::Gis(GisToken*,char)
 0001:00005B38      OutMidiFile::AddTime(frac)
 0001:00005B40      OutDevice::Panic()
 0001:00005B48      OutDevice::NeedsRealTime()
 0001:00005B50      OutMidiFile::GetName()
 0001:00005B5C      OutMidiFile::GetType() const
 0001:00005B68      OutMidiPort::Gis(GisToken*,char)
 0001:00005B70      OutMidiPort::AddTime(frac)
 0001:00005B78      OutMidiPort::MidiOut(unsigned char*,char)
 0001:00005B80      OutMidiPort::NeedsRealTime()
 0001:00005B88      OutMidiPort::GetName()
 0001:00005B94      OutMidiPort::GetType() const
 0001:00005BA0      OutGis::Open()
 0001:00005BA8      OutGis::Close()
 0001:00005BBC      OutGis::NoteOn(int,int,int,Route*,int,ChannelData*)
 0001:00005BC4      OutGis::NoteOff(int,int,int,Route*,int)
 0001:00005BCC      OutGis::NotesCorrect(int)
 0001:00005BD4      OutGis::Sustain(char,int)
 0001:00005BDC      OutGis::AddTime(frac)
 0001:00005C00      OutGis::MidiOut(unsigned long,char)
 0001:00005C08      OutGis::MidiOut(unsigned char*,char)
 0001:00005C10      OutGis::Quite(Route*)
 0001:00005C18      OutGis::GetName()
 0001:00005C24      OutGis::GetType() const
 0001:00005C30      __tpdsc__[OutDevice]
 0001:00005C78      OutDevice::GetType() const
 0001:00005C80      __tpdsc__[InDevice]
 0001:00005CC8      InDevice::GetType() const
 0001:00005CD0      TStandardAllocator::operator delete(void*)
 0001:00005CE0      TStandardAllocator::operator delete[](void*)
 0001:00005CF0      TMCVectorImp<unsigned char,TStandardAllocator>::~TMCVectorImp<unsigned char,TStandardAllocator>()
 0001:00005D48      TMVectorImp<unsigned char,TStandardAllocator>::~TMVectorImp<unsigned char,TStandardAllocator>()
 0001:00005D98      OutGis::~OutGis()
 0001:00005E50      GisWriteHead::~GisWriteHead()
 0001:00005EEC      OutMidiPort::~OutMidiPort()
 0001:00005F5C      OutMidiFile::~OutMidiFile()
 0001:00006048      __tpdsc__[Track]
 0001:0000608C      TArray<unsigned char>::~TArray<unsigned char>()
 0001:00006110      __tpdsc__[TArrayAsVector<unsigned char>]
 0001:00006178      InGis::~InGis()
 0001:000061F4      InMidiPort::~InMidiPort()
 0001:00006270      InMidiFile::~InMidiFile()
 0001:000062EC      TVectorImpBase<unsigned char,TStandardAllocator>::~TVectorImpBase<unsigned char,TStandardAllocator>()
 0001:0000631C      __tpdsc__[TStandardAllocator]
 0001:00006340      TArrayAsVector<unsigned char>::~TArrayAsVector<unsigned char>()
 0001:000063BC      __tpdsc__[TMArrayAsVector<unsigned char,TStandardAllocator>]
 0001:00006438      Track::~Track()
 0001:000064DC      TMArrayAsVector<unsigned char,TStandardAllocator>::~TMArrayAsVector<unsigned char,TStandardAllocator>()
 0001:0000654C      __tpdsc__[TDArrayAsVectorImp<TMCVectorImp<unsigned char,TStandardAllocator>,unsigned char>]
 0001:000065E8      TDArrayAsVectorImp<TMCVectorImp<unsigned char,TStandardAllocator>,unsigned char>::~TDArrayAsVectorImp<TMCVectorImp<unsigned char,TStandardAllocator>,unsigned char>()
 0001:00006650      __tpdsc__[TArrayAsVectorImp<TMCVectorImp<unsigned char,TStandardAllocator>,unsigned char>]
 0001:000066E4      TArrayAsVectorImp<TMCVectorImp<unsigned char,TStandardAllocator>,unsigned char>::~TArrayAsVectorImp<TMCVectorImp<unsigned char,TStandardAllocator>,unsigned char>()
 0001:00006744      __tpdsc__[TModule]
 0001:00006794      __tpdsc__[TStreamableBase]
 0001:000067E0      GlobalReset()
 0001:000067E0      @C6_0
 0001:000068C8      execute_aktion(int,do_aktion*)
 0001:00006BEF      update_pattern(int)
 0001:00006C4B      change_anker(int,int)
 0001:00006D65      change_breite(int,int)
 0001:00006E99      tiefste_taste(int)
 0001:00006ED7      hoechste_taste(int)
 0001:00006F12      compare_harmonie(int,int,PTRN*,PTRN*)
 0001:00006F6D      HarmonyAnalysis(int,PTRN*)
 0001:000070D4      AddKey(int,int,int)
 0001:0000717A      DeleteKey(int,int,int)
 0001:0000725B      KeyboardIn(int,char*)
 0001:000072C4      MidiAnalysis(int,unsigned char)
 0001:00007321      KeyboardAnalyse
 0001:00007378      keyboard_analyse(int)
 0001:0000738B      KeyboardAnalyseSimple
 0001:000073CC      protokoll_aktuelles_tonsystem(int)
 0001:000074E0      protokoll_liegende_frequenzen(int)
 0001:00007638      protokoll_aktuelle_relationen(int)
 0001:000076CC      protokoll_liegende_relationen(int)
 0001:00007890      AktionenInit()
 0001:00007890      @C7_0
 0001:0000789C      AktionenMessage(int,char*)
 0001:00007904      GetActString
 0001:00007933      InitCompDia(HWND__*)
 0001:00007940      calc_declaration_numbers(char)
 0001:00007A23      show_line_number(int)
 0001:00007A72      fatal_error(int,...)
 0001:00007AB0      compiler_warning(int,...)
 0001:00007AEF      laufzeit_message(char*)
 0001:00007B48      init_laufzeit_protokoll()
 0001:00007B66      exit_laufzeit_protokoll()
 0001:00007B6B      laufzeit_protokoll(char*,...)
 0001:00007B9B      GetKeyString
 0001:00007BC7      GetTSString
 0001:00007BF3      GetLineNumbers
 0001:00007BFD      GetErrorLine
 0001:00007C28      @C8_0
 0001:00007C28      intern_fgetc(FILE*)
 0001:00007C4D      intern_ungetc(int,FILE*)
 0001:00007C71      xalloca(unsigned int)
 0001:00007C8F      xde_alloca(void*)
 0001:00007C9D      xfree(void*)
 0001:00007CA2      xmalloc(unsigned int)
 0001:00007DA7      xrealloc(void*,unsigned int)
 0001:00007E24      xcalloc(unsigned int,unsigned int)
 0001:00007E63      loesche_syntax_speicher()
 0001:00007E98      init_syntax_speicher()
 0001:00007EA2      yfree(void*)
 0001:00007EA7      ymalloc(unsigned int)
 0001:00007EE8      yrealloc(void*,unsigned int)
 0001:00007F0C      ycalloc(unsigned int,unsigned int)
 0001:00007F3B      init_laufzeit_speicher()
 0001:00007F45      loesche_laufzeit_speicher()
 0001:00007F7C      @C9_0
 0001:00007FE4      get_wert_komplex_intervall(komplex_intervall*)
 0001:00008054      intervall_list_laenge(intervall*)
 0001:000081D4      berechne_intervalle_absolut(intervall*)
 0001:00008322      check_komplex_intervall(komplex_intervall*,char*)
 0001:00008380      @C10_0
 0001:00008380      yyparse()
 0001:00009680      yylex()
 0001:00009A04      init_yylex()
 0001:00009A18      yyerror(char*)
 0001:00009A20      @C11_0
 0001:00009A20      allgemeine_initialisierungen()
 0001:00009A5E      ton_list_laenge(ton*)
 0001:00009A7B      tonsystem_list_laenge(tonsystem*)
 0001:00009A98      umstimmungs_list_laenge(umstimmung*)
 0001:00009AB5      logik_list_laenge(logik*)
 0001:00009AD2      midi_list_laenge(midiliste*)
 0001:00009AEF      get_logik_nummer(char*,logik*)
 0001:00009B37      parameter_list_laenge(parameter_liste*)
 0001:00009B54      argument_list_laenge(argument_liste*)
 0001:00009B71      get_ton(char*,ton*)
 0001:00009BB2      get_intervall(char*,intervall*)
 0001:00009BE8      parser_get_tonsystem(char*,tonsystem*)
 0001:00009C1E      get_umstimmung(char*,umstimmung*)
 0001:00009C54      get_harmonie(char*,harmonie*)
 0001:00009C8A      get_logik(char*,logik*)
 0001:00009CC0      init_integersequenz()
 0001:00009CCC      get_new_integer_in_integersequenz(int)
 0001:00009D08      init_parameter_liste()
 0001:00009D14      get_new_name_in_parameterlist(char*)
 0001:00009DAC      print_argumentliste(argument_liste*)
 0001:00009DEA      init_argument_liste()
 0001:00009DF6      get_new_number_in_argument_list(double)
 0001:00009E34      get_new_name_in_argument_list(char*)
 0001:00009E80      init_aktions_liste()
 0001:00009E8C      get_new_aktion_aufruf_element(char*)
 0001:00009ED1      get_new_aktion_midi_out_element()
 0001:00009F16      init_komplex_ton_list()
 0001:00009F22      get_new_faktor_anteil(double,char*)
 0001:00009F62      get_last_komplex_intervall()
 0001:00009F6C      setze_nummer_von_abstand_und_zentrum()
 0001:0000A07B      mutabor_programm_einlesen(char*)
 0001:0000A2EB      print_integersequenz(midiliste*)
 0001:0000A3C9      get_new_intervall(char*,double)
 0001:0000A45D      get_new_intervall_komplex(char*)
 0001:0000A4C0      get_new_ton_absolut(char*,double)
 0001:0000A525      get_new_ton_komplex_positive(char*,char*)
 0001:0000A590      get_new_ton_komplex_negative(char*,char*)
 0001:0000A624      init_ton_liste()
 0001:0000A630      get_new_ton_in_tonsystem(char*)
 0001:0000A662      get_new_tonsystem(char*,int)
 0001:0000A6CF      get_new_tonsystem_negative(char*,int)
 0001:0000A767      init_umstimmung(char*)
 0001:0000A7C7      get_new_umstimmung()
 0001:0000A7E7      eintrage_parameterliste_in_umstimmung()
 0001:0000A7FA      get_umstimmung_taste_abs(argument_typ,double,char*)
 0001:0000A85F      get_umstimmung_taste_rel(argument_typ,double,char*,char)
 0001:0000A8CE      get_umstimmung_breite_abs(argument_typ,double,char*)
 0001:0000A935      get_umstimmung_breite_rel(argument_typ,double,char*,char)
 0001:0000A9A4      init_umstimm_expression_list()
 0001:0000A9B0      get_new_umstimm_expression(char*)
 0001:0000A9F9      get_new_umstimm_expression_positive(char*)
 0001:0000AA45      get_new_umstimm_expression_negative(char*)
 0001:0000AAA1      get_umstimmung_tonhoehe_veraendert()
 0001:0000AAC1      get_umstimmung_wiederholung_abs()
 0001:0000AAE0      get_umstimmung_wiederholung_abs_negative()
 0001:0000AB28      get_umstimmung_wiederholung_rel_positive()
 0001:0000AB47      get_umstimmung_wiederholung_rel_negative()
 0001:0000AB7F      get_umstimmung_umstimmungs_bund()
 0001:0000ABF7      get_umstimmungs_case_zahl_element(int)
 0001:0000AC39      get_umstimmungs_case_default_element()
 0001:0000AC7C      init_umstimmungs_case_liste()
 0001:0000AC88      get_umstimmung_umstimm_case_zahl(int)
 0001:0000AD2F      get_umstimmung_umstimm_case_parameter(char*)
 0001:0000AE04      get_umstimmung_midi_out()
 0001:0000AE23      init_tastenliste()
 0001:0000AE2F      get_new_taste(int,char)
 0001:0000AE69      get_new_harmonie(char*,int)
 0001:0000AECC      get_harmoniebezeichner(int,char*,int)
 0001:0000AEEB      init_ausloeser()
 0001:0000AEF7      get_last_ausloeser()
 0001:0000AF01      get_ausloeser_default()
 0001:0000AF1E      get_ausloeser_harmonie()
 0001:0000AF64      get_ausloeser_harmonie_form()
 0001:0000AFAC      get_ausloeser_taste(char*)
 0001:0000AFEE      get_ausloeser_midi_in()
 0001:0000B019      init_anweisungs_liste()
 0001:0000B025      get_last_anweisungs_liste()
 0001:0000B02F      get_new_anweisung()
 0001:0000B06D      get_new_logik(char*,char*)
 0001:0000B0D6      vervollstaendige_logik()
 0001:0000B0F6      get_instrument_dekl(int,int,int,int,instrument**)
 0001:0000B455      enthalten_in_tastenliste(int,taste*)
 0001:0000C044      @C12_0
 0001:0000C044      get_komplex_faktor(komplex_intervall*)
 0001:0000C0B8      get_komplex_frequenz(ton*)
 0001:0000C0F6      fprint_argument(FILE*,argument*)
 0001:0000CA3A      expand_pattern(char*)
 0001:0000CAB3      insert_in_globale_liste(int,logik*)
 0001:0000CC99      insert_in_lokale_liste(int,anweisung*,char*)
 0001:0000D06B      mutabor_tabellen_generator()
 0001:0000D184      std::operator >>(istream&,std::basic_string<char,std::string_char_traits<char>>&)
 0001:0000D184      @C13_0
 0001:0000D18C      std::operator <<(ostream&,const std::basic_string<char,std::string_char_traits<char>>&)
 0001:0000D194      std::vector<bool>::flip()
 0001:0000D284      std::swap(std::vector<bool>::reference)
 0001:0000D2D5      std::vector<bool>::insert_aux(std::vector<bool>::iterator,...
 0001:0000D63D      std::vector<bool>::insert(std::vector<bool>::iterator,const bool&)
 0001:0000DB40      std::vector<bool>::insert(std::vector<bool>::iterator,short,...
 0001:0000E0AE      std::vector<bool>::resize(unsigned int,bool)
 0001:0000E2B0      OutMidiPort::Open()
 0001:0000E87C      OutMidiPort::Close()
 0001:0000EA01      OutMidiPort::NoteOn(int,int,int,Route*,int,ChannelData*)
 0001:0000F754      OutMidiPort::NoteOff(int,int,int,Route*,int)
 0001:0000F95D      OutMidiPort::NotesCorrect(int)
 0001:0001006F      OutMidiPort::Sustain(char,int)
 0001:000101DC      OutMidiPort::MidiOut(unsigned long,char)
 0001:0001035C      OutMidiPort::Quite(Route*)
 0001:000103BD      OutMidiPort::Panic()
 0001:0001076E      mycallback(double,std::vector<unsigned char>*,void)
 0001:000107A8      InMidiPort::Open()
 0001:00010832      InMidiPort::Close()
 0001:0001088B      InMidiPort::ProceedRoute(unsigned long,Route*)
 0001:00010A2D      InMidiPort::Proceed(unsigned long)
 0001:00010B04      ReadLength(ifstream&)
 0001:00010B04      @C14_0
 0001:00010B43      WriteLength(ofstream&,unsigned long)
 0001:00010CB2      CurrentTimeFunc(unsigned int,unsigned int,unsigned long,unsigned long,unsigned long) __stdcall
 0001:00010CBF      StartCurrentTime()
 0001:00010CE2      StopCurrentTime()
 0001:00010CF2      Track::WriteDelta()
 0001:00010D55      Track::Save(ofstream&)
 0001:00010F7F      OutMidiFile::Open()
 0001:00010F92      OutMidiFile::Close()
 0001:000110FD      OutMidiFile::NoteOn(int,int,int,Route*,int,ChannelData*)
 0001:0001155F      OutMidiFile::NoteOff(int,int,int,Route*,int)
 0001:000116A6      OutMidiFile::NotesCorrect(int)
 0001:000119C1      OutMidiFile::Sustain(char,int)
 0001:000119C6      OutMidiFile::MidiOut(unsigned long,char)
 0001:00011A29      OutMidiFile::MidiOut(unsigned char*,char)
 0001:00011A6C      OutMidiFile::Quite(Route*)
 0001:00011AD3      MidiTimeFunc(unsigned int,unsigned int,unsigned long,unsigned long,unsigned long) __stdcall
 0001:00011AE3      ReadDelta(unsigned char*,unsigned long*)
 0001:00011B0A      InMidiFile::Open()
 0001:00011EA9      InMidiFile::Close()
 0001:00011F0E      InMidiFile::Stop()
 0001:00011FB3      InMidiFile::Play()
 0001:00011FEC      InMidiFile::Pause()
 0001:00012018      InMidiFile::IncDelta()
 0001:00012103      InMidiFile::ReadMidiProceed(int,long)
 0001:0001248C      InMidiFile::ProceedRoute(unsigned long,Route*)
 0001:00012658      InMidiFile::Proceed(unsigned long,int)
 0001:00012700      __tpdsc__[ofstream]
 0001:0001276C      __tpdsc__[ifstream]
 0001:000127D8      __tpdsc__[fstreambase]
 0001:00012834      __tpdsc__[istream]
 0001:00012884      __tpdsc__[filebuf]
 0001:000128D4      GetKeyPitch(int,TSYS*,int&,double&)
 0001:000128D4      @C15_0
 0001:000129D0      OutGis::Gis(GisToken*,char)
 0001:000129F1      GisTimeFunc(unsigned int,unsigned int,unsigned long,unsigned long,unsigned long) __stdcall
 0001:00012A01      InGis::Open()
 0001:00012BDC      InGis::Close()
 0001:00012D6A      InGis::Stop()
 0001:00012FE3      InGis::Play()
 0001:00013013      InGis::Pause()
 0001:00013036      InGis::IncDelta()
 0001:000130AA      MutaborTag(GisReadArtHead*,GisToken*,int)
 0001:00013130      InGis::Proceed(GisReadArtHead*,char,Route*)
 0001:0001337F      InGis::ProceedRoute(GisReadArtHead*,char)
 0001:00013442      InGis::ReadOn(long)
 0001:000137D2      @C15_3
 0001:000137F0      __tpdsc__[GisReadArtHead*]
 0001:00013810      GisReadHead::~GisReadHead()
 0001:00013898      GisToken::~GisToken()
 0001:00013920      __tpdsc__[GisReadArtHead]
 0001:00013978      __tpdsc__[GisToken]
 0001:000139C0      GisToken::Type() const
 0001:000139CC      GisToken::Copy()
 0001:00013A44      __tpdsc__[GisReadHead]
 0001:00013A8C      GisReadHead::Build(GisReadHead*,GisToken*,char*,char)
 0001:00013B5C      GisReadArtHead::Build(GisReadHead*,GisToken*,char*,char)
 0001:00013D04      GisReadArtHead::~GisReadArtHead()
 0001:00013DD4      __tpdsc__[GisToken*]
 0001:00013DEC      __tpdsc__[GisReadHead*]
 0001:00013E08      @C16_0
 0001:00013E08      NextRouteId()
 0001:00013E18      InDevice::GetMoveRoutes()
 0001:00013E2A      InDevice::GetRoute(int)
 0001:00013E49      InDevice::nRoutes()
 0001:00013E63      InDevice::AddRoute(Route*)
 0001:00013E7C      InDevice::Quite()
 0001:00013EA6      OutNotesCorrect(int)
 0001:00013ECD      OutOpen()
 0001:00013EEB      OutClose()
 0001:00013F0A      OutAddTime(frac)
 0001:00013F3B      InOpen()
 0001:00013F59      InClose()
 0001:00013F78      NeedsRealTime()
 0001:00013FC3      MidiOut(int,unsigned long,char)
 0001:0001400D      NotesCorrect(int)
 0001:00014034      abs(const long)
 0001:00014034      @C17_0
 0001:00014042      frac::operator =(const frac&)
 0001:00014057      frac::operator +=(const frac&)
 0001:000140E8      frac::operator -=(const frac&)
 0001:00014178      frac::operator *=(const frac&)
 0001:000141BF      frac::operator /=(const frac&)
 0001:00014206      frac::operator +(const frac)
 0001:0001429C      frac::operator -(const frac)
 0001:00014332      frac::operator *(const frac)
 0001:00014385      frac::operator /(const frac)
 0001:000143D8      frac::operator <(const frac&)
 0001:00014425      frac::operator <=(const frac&)
 0001:00014472      frac::operator ==(const frac&)
 0001:00014492      frac::operator !=(const frac&)
 0001:000144B2      frac::operator >=(const frac&)
 0001:000144FF      frac::operator >(const frac&)
 0001:0001454C      frac::operator =(const int&)
 0001:00014562      frac::gcd(long,long)
 0001:000145BB      operator <<(ostream&,const frac)
 0001:00014618      @C18_0
 0001:00014618      GisTag::GetParaType(int)
 0001:00014648      GisTag::GetPara(int)
 0001:00014667      Name2Key(const char*)
 0001:000146DE      Acc2Int(const char*)
 0001:00014716      strdupchr(char)
 0001:00014737      GisNote::GisNote(int,int,int,char*,GisToken*)
 0001:000148BF      GisNote::GetKey()
 0001:000148FD      Clear(char**)
 0001:00014918      AddStr(char**,const char*,const char*)
 0001:00014991      BuildTag()
 0001:00014AAD      StartSep()
 0001:00014B3C      BeginSegment()
 0001:00014BF4      EndSegment()
 0001:00014C42      BeginSequenz()
 0001:00014CFA      EndSequenz()
 0001:00014D48      BeginParameter()
 0001:00014D66      EndParameter()
 0001:00014DAA      BeginRange()
 0001:00014F46      EndRange()
 0001:0001500C      NextSequenz()
 0001:00015021      Note(char*,char*,int,frac)
 0001:00015148      Tag(char*)
 0001:00015182      TagParaInt(long)
 0001:0001522F      TagParaReal(double)
 0001:000152EC      TagParaStr(char*)
 0001:000153A9      Comma()
 0001:00015453      UnRavel()
 0001:0001550B      GetGisType(GisToken*)
 0001:00015524      GetTagId(const char*,char**)
 0001:000155A0      CopyPara(GisToken*)
 0001:000155D4      GisParse(const char*)
 0001:000156B1      @C18_3
 0001:000156C8      __tpdsc__[GisNote*]
 0001:000156E0      __tpdsc__[GisTag*]
 0001:000156F8      __tpdsc__[GisSegment*]
 0001:00015714      __tpdsc__[GisSequenz*]
 0001:00015730      __tpdsc__[GisTagBegin*]
 0001:0001574C      __tpdsc__[GisTagEnd*]
 0001:00015764      __tpdsc__[GisParaInt*]
 0001:00015780      __tpdsc__[GisParaReal*]
 0001:0001579C      __tpdsc__[GisParaStr*]
 0001:000157B8      __tpdsc__[GisComma*]
 0001:000157D0      __tpdsc__[GisComma]
 0001:00015824      __tpdsc__[GisParaStr]
 0001:00015878      __tpdsc__[GisParaReal]
 0001:000158CC      __tpdsc__[GisParaInt]
 0001:00015920      __tpdsc__[GisTagEnd]
 0001:00015974      __tpdsc__[GisTagBegin]
 0001:000159C8      __tpdsc__[GisSequenz]
 0001:00015A1C      __tpdsc__[GisSegment]
 0001:00015A70      __tpdsc__[GisTag]
 0001:00015AC0      __tpdsc__[GisNote]
 0001:00015B10      GisComma::Type() const
 0001:00015B1C      GisParaStr::Type() const
 0001:00015B28      GisParaStr::Copy()
 0001:00015BCC      GisParaReal::Type() const
 0001:00015BD8      GisParaReal::Copy()
 0001:00015C78      GisParaInt::Type() const
 0001:00015C84      GisParaInt::Copy()
 0001:00015D14      GisTagEnd::Type() const
 0001:00015D20      GisTagBegin::Type() const
 0001:00015D2C      GisTagBegin::Copy()
 0001:00015E24      GisSequenz::Type() const
 0001:00015E30      GisSegment::Type() const
 0001:00015E3C      GisTag::Type() const
 0001:00015E48      GisTag::Copy()
 0001:00015F2C      GisNote::Type() const
 0001:00015F38      GisNote::~GisNote()
 0001:00015F9C      GisTag::~GisTag()
 0001:00016088      GisSegment::~GisSegment()
 0001:00016168      GisSequenz::~GisSequenz()
 0001:00016248      GisTagBegin::~GisTagBegin()
 0001:0001630C      GisTagEnd::~GisTagEnd()
 0001:00016370      GisParaInt::~GisParaInt()
 0001:000163D4      GisParaReal::~GisParaReal()
 0001:00016438      GisParaStr::~GisParaStr()
 0001:000164D0      GisComma::~GisComma()
 0001:00016534      GetReal(GisToken*)
 0001:00016534      @C19_0
 0001:00016570      GetMidiInstrument(GisToken*)
 0001:000165CF      GetTheSpeedFactor(GisToken*)
 0001:00016703      GisReadHead::InsertInfrontOf(GisReadHead*)
 0001:0001673E      GisReadHead::CutOut()
 0001:00016779      GisReadHead::CreateSegmentSubs()
 0001:00016806      GisReadHead::CreateSequenzSubs()
 0001:0001685C      GisReadHead::Read()
 0001:000168AC      GisReadDummy(GisReadHead*,char)
 0001:000168B1      GisReadHeadOn(GisReadHead**,frac,void(*)(GisReadHead*,char))
 0001:00016AF3      Copy(TagListData*)
 0001:00016B1E      Erase(TagListData*)
 0001:00016B3B      RemoveTag(TagListData**)
 0001:00016B59      AddTag(TagListData**,GisTag*)
 0001:00016BA2      EndTag(TagListData**,GisTagEnd*)
 0001:00016BE7      GisReadArtHead::Read()
 0001:00016F67      GisReadArtDummy(GisReadArtHead*,char)
 0001:00016F6C      GisReadArtHeadOn(GisReadArtHead**,frac,void(*)(GisReadArtHead*,char))
 0001:000172E6      StrCmp(const char*,const char*)
 0001:00017315      CmpNote(GisToken*,GisToken*)
 0001:00017373      ChordNote::ChordNote(ChordNote*)
 0001:00017550      ChordNote::CountOnTime(frac)
 0001:00017599      ChordNote::SetNoteOn(GisToken*)
 0001:000176C3      ChordNote::SetNoteOff(GisToken*)
 0001:00017750      ChordNote::AddGis(GisToken*)
 0001:00017788      ChordNote::CheckCloseAlter()
 0001:0001785D      ChordNote::CheckCloseTie()
 0001:000179E4      ChordNote::MutNoteOn(int,double,int,int,char*)
 0001:00017C1D      ChordNote::MutNoteOff()
 0001:00017D72      GisWriteHead::InsertAfter(GisWriteHead*)
 0001:00017D9F      GisWriteHead::CutOut()
 0001:00017DD4      GisWriteHead::GetFreeNote()
 0001:00018166      GisWriteHead::GetNote(int,int)
 0001:0001819A      GisWriteHead::ReadyForBoss()
 0001:000181AF      GisWriteHead::RemoveComma()
 0001:00018237      GisWriteHead::CloseSubs(GisToken**)
 0001:0001837A      GisWriteHead::CloseCurrentToken(char)
 0001:00018613      GisWriteHead::ProceedGis(GisToken*,char)
 0001:00018B0F      GisWriteHead::WriteChord()
 0001:00018C2D      GisWriteHead::AddTime(frac)
 0001:00018C97      GetMatchingHeader(GisWriteHead**,char*)
 0001:00018EC2      GisWriteHeadGis(GisWriteHead**,char*,GisToken*,char)
 0001:00018EE5      CloseAllSubs(GisWriteHead*)
 0001:000190D8      __tpdsc__[ChordNote*]
 0001:000190F0      ChordNote::~ChordNote()
 0001:000191C8      __tpdsc__[ChordNote]
 0001:00019210      AddStr(char*,int&,char*)
 0001:00019210      @C20_0
 0001:00019241      CharIn(char,const char*)
 0001:0001925E      IsLetter(char)
 0001:00019297      IsNumber(char)
 0001:000192BA      DoError(int,int)
 0001:00019309      CheckError(int)
 0001:00019350      SavePos()
 0001:0001937D      GetSep()
 0001:00019546      ReadLong(int)
 0001:000195E6      ReadParaNumber()
 0001:000196C6      ReadParaStr()
 0001:00019797      ReadTag()
 0001:00019895      ReadNote()
 0001:00019C32      DoParse()
 0001:00019FA0      GspParse(const char*)
 0001:0001A07F      @C20_3
 0001:0001A098      @C22_0
 0001:0001A098      OpenFile(const char*)
 0001:0001A10B      CloseFile()
 0001:0001A154      ReadNewLine()
 0001:0001A1DC      __tpdsc__[ifstream*]
 0001:0001A1F4      @C40_0
 0001:0001A1F4      DllEntryPoint
 0001:0001A224      @C41_0
 0001:0001A224      OwlMain(int,char**)
 0001:0001A24C      @C42_0
 0001:0001A24C      _OWLInitUserDLL
 0001:0001A36A      @C42_2
 0001:0001A3A4      __tpdsc__[xmsg&]
 0001:0001A3B8      __tpdsc__[string]
 0001:0001A3FC      __tpdsc__[xmsg] const
 0001:0001A440      @C175_0
 0001:0001A440      terminate()
 0001:0001A446      set_terminate(void(*)())
 0001:0001A46E      ___call_terminate
 0001:0001A520      unexpected()
 0001:0001A526      set_unexpected(void(*)())
 0001:0001A54E      ___call_unexpected
 0001:0001A5C0      __GetPolymorphicDTC(void*,unsigned int)
 0001:0001A5DF      __ExceptInit
 0001:0001A67A      __GetExceptDLLinfoInternal
 0001:0001A6B8      @__InitExceptBlockLDTC
 0001:0001A6B8      @C176_0
 0001:0001A6F4      _vector_new_ldtc_(void*,unsigned int,unsigned int,unsigned int,void*,unsigned int,void*)
 0001:0001A6F4      @C186_0
 0001:0001A898      @C190_0
 0001:0001A898      __pure_error_
 0002:00000020      @D1_1
 0002:00000078      ___isDLL
 0002:00000079      ___useDynamicTLS
 0002:0000007A      ___isGUI
 0002:0000007B      __TLS_index
 0002:0000007F      __TLS_index4
 0002:00000083      __hInstance
 0002:000000DC      ___CPPdebugHook
 0002:000000F0      @D2_1
 0002:00001538      RtMidiOut::
 0002:0000155C      RtMidiIn::
 0002:00001580      RtError::
 0002:0000159C      RtMidi::
 0002:000015C0      _RealTime
 0002:000015C0      @D3_1
 0002:000015D4      _RTName
 0002:00001994      InMidiFile::
 0002:000019C4      InMidiPort::
 0002:000019F4      InGis::
 0002:00001A24      TVectorImpBase<unsigned char,TStandardAllocator>::
 0002:00001A40      TMVectorImp<unsigned char,TStandardAllocator>::
 0002:00001A5C      TMCVectorImp<unsigned char,TStandardAllocator>::
 0002:00001A7C      OutMidiFile::
 0002:00001AC4      OutMidiPort::
 0002:00001B0C      OutGis::
 0002:00001B54      OutDevice::
 0002:00001B9C      InDevice::
 0002:00001BC8      @D5_1
 0002:00001BC8      _Error_text
 0002:00001D14      _Warning_text
 0002:00002A20      _protokollfunktionen_aktiv
 0002:00002A20      @D6_1
 0002:00002A24      _protokollfunktion_aktionsausgabe
 0002:00002A28      _zeige_aktuelles_tonsystem
 0002:00002A2C      _tonsystem_init
 0002:00002B58      _freies_tonsystem
 0002:00002B5C      _laufzeit_meldungen_erlaubt
 0002:00002B60      _aktuelles_midi_instrument
 0002:00002B64      _aktuelles_keyboard_instrument
 0002:00002C04      _protokoll_ausgabezeile
 0002:00002C04      @D7_1
 0002:00002C08      _aktionen_ausgabezeile
 0002:00002C0C      _nAktionen
 0002:00002CB4      @D8_1
 0002:00002CB4      _SeRiEnNuMmEr
 0002:00002CC8      @D9_1
 0002:00002CF4      @D10_1
 0002:000042D4      @D11_1
 0002:0000451C      @D12_1
 0002:0000452C      _start_parameter_liste
 0002:000045E8      @D13_1
 0002:00004CB8      _lMidiCode
 0002:00004CB8      @D14_1
 0002:00004D88      @D15_1
 0002:00004E40      _Cd
 0002:00004F50      GisToken::
 0002:00004F64      GisReadHead::
 0002:00004F74      GisReadArtHead::
 0002:00004F84      _OutDevices
 0002:00004F84      @D16_1
 0002:00004F88      _InDevices
 0002:00004F8C      _InDevChanged
 0002:00004F90      _RouteIds
 0002:00004F94      @D17_1
 0002:00004F9C      _Tags
 0002:00004F9C      @D18_1
 0002:0000506C      _TagShorts
 0002:0000566C      GisComma::
 0002:00005680      GisParaStr::
 0002:00005694      GisParaReal::
 0002:000056A8      GisParaInt::
 0002:000056BC      GisTagEnd::
 0002:000056D0      GisTagBegin::
 0002:000056E4      GisSequenz::
 0002:000056F8      GisSegment::
 0002:0000570C      GisTag::
 0002:00005720      GisNote::
 0002:00005734      _ArticulationHold
 0002:00005734      @D19_1
 0002:00005739      _ArticulationOff
 0002:00005D7C      _SepChars
 0002:00005D7C      @D20_1
 0002:00005D7F      _DelimitChars
 0002:00006954      @D21_1
 0002:00006954      _GspErrorText
 0002:00006C3C      @D22_1
 0002:00006C9C      _Module
 0002:00006C9C      @D30_1
 0002:00006CA0      _DocTemplateStaticHead
 0002:00006CA4      @D41_1
 0002:00006CE4      @D42_1
 0002:00006D7C      ___CPPexceptionList
 0002:00006D7C      @D175_1
 0002:00006D80      ___exceptFlags
 0002:00006D84      ___debuggerHookFN
 0002:00006D88      ___debuggerWatchingP
 0002:00006D8C      ___debuggerHookDataP
 0002:00006D90      ___terminatePTR
 0002:00006D94      ___unexpectdPTR
 0002:00006D98      ___throwFileName
 0002:00006D9C      ___throwLineNumber
 0002:00006DA0      ___throwExceptionName
 0002:00006DA4      ___exceptStaticBuffP
 0002:00006DA8      ___exceptMemAllocVars
 0002:00006DAC      ___ExceptStaticXbuff
 0002:00006E60      __ExceptVarsSize
 0002:00006E64      __DebuggerHookData
 0002:00006EDC      __turboFloat
 0002:00006EDC      @D182_1
 0002:00006EE0      @D186_1
 0002:00006F54      @D190_1
 0003:00000000      @B3_2
 0003:00000000      _weiter_gehts_nach_compilerfehler
 0003:00000020      _last
 0003:00000024      _last_tonsystem
 0003:00012C24      _lauf_instrument
 0003:00012C28      @B6_2
 0003:00012C28      _pattern
 0003:00024C28      _tonsystem_memory
 0003:00037954      _tonsystem
 0003:00037D54      _liegende_tasten
 0003:00047D54      _liegende_tasten_max
 0003:00048154      _last_note_id
 0003:00048554      _laufzeit_abstand
 0003:00048954      _laufzeit_zentrum
 0003:00048D54      _tempstring
 0003:00048E54      @B7_2
 0003:00048E54      _CompDiaLine
 0003:00048E58      _protokoll_string
 0003:00049308      _sAktionen
 0003:0004A690      _boxAktionen
 0003:0004A6F4      _lAktionen
 0003:0004A884      _keys_changed
 0003:0004AC84      _sd1
 0003:0004ACE8      _sd2
 0003:0004AD4C      _Fmeldung
 0003:0004AE4C      @B8_2
 0003:0004AE54      @B9_2
 0003:0004AE64      _yychar
 0003:0004AE64      @B10_2
 0003:0004AE68      _yylval
 0003:0004AE70      _yylloc
 0003:0004AE88      _yynerrs
 0003:0004AE8C      _list_of_intervalle
 0003:0004AE8C      @B11_2
 0003:0004AE90      _list_of_toene
 0003:0004AE94      _list_of_tonsysteme
 0003:0004AE98      _list_of_umstimmungen
 0003:0004AE9C      _list_of_harmonien
 0003:0004AEA0      _list_of_logiken
 0003:0004AEA4      _list_of_instrumente
 0003:0004AEA8      _list_of_config_instrumente
 0003:0004AEAC      _ton_ohne_namen
 0003:0004AEC4      _quelldatei
 0003:0004AF10      @B12_2
 0003:0004AF10      _first_harmonie
 0003:0004B310      _last_global_harmonie
 0003:0004B710      _first_lokal_harmonie
 0003:0004B714      _first_keyboard
 0003:0004BB14      _last_global_keyboard
 0003:0004BF14      _first_lokal_keyboard
 0003:0004BF18      _first_midi
 0003:0004C318      _last_global_midi
 0003:0004C718      _first_lokal_midi
 0003:0004C71C      _anzahl_eingelesene_zeichen
 0003:0004C720      _pData
 0003:0004C720      @B14_2
 0003:0004C724      _nData
 0003:0004C728      _NRT_Speed
 0003:0004C72C      _CurrentTime
 0003:0004C730      _CurrentTimeId
 0003:0004C734      _CurrentId
 0003:0004C734      @B15_2
 0003:0004C738      _CurrentSep
 0003:0004C73C      _Root
 0003:0004C73C      @B18_2
 0003:0004C740      _Current
 0003:0004C744      _LastOpenBracket
 0003:0004C748      _LastOpenRange
 0003:0004C74C      _TagMode
 0003:0004C750      _TagName
 0003:0004C754      _TagSep
 0003:0004C758      _Para
 0003:0004C75C      _LastPara
 0003:0004C760      _LastOctave
 0003:0004C764      _LastDuration
 0003:0004C76C      _GspCurrentLineNr
 0003:0004C76C      @B20_2
 0003:0004C770      _GspErrorLineNr
 0003:0004C774      _GspErrorPos
 0003:0004C778      _GspErrorLine
 0003:0004C77C      _GspError
 0003:0004C780      _PossibleErrorLineNr
 0003:0004C784      _PossibleErrorPos
 0003:0004C788      _PossibleErrorLine
 0003:0004CB70      _Sep
 0003:0004EAB0      _SepPos
 0003:0004EAB4      _ParaMode
 0003:0004EAB5      _Komma
 0003:0004EAB8      _NumberLength
 0003:0004EABC      _BracketDeep
 0003:0004EAC0      _Brackets
 0003:0004EB88      _LastTag
 0003:0004EB8C      _octave
 0003:0004EB90      _accedentials
 0003:0004EF78      _duration
 0003:0004EF80      _minus
 0003:0004EF84      _CurrentLine
 0003:0004EF84      @B22_2
 0003:0004F36C      _CurrentPos
 0003:0004F370      _Eof
 0003:0004F374      _File
 0004:00000000      @T175_3
 0004:00000000      ___xxInfo
