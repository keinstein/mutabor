#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

cache_file=config.cache
AC_PREREQ(2.59)
AC_INIT(Mutabor, 3.1.0-0pre1, mutabor@math.tu-dresden.de)
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
echo target_os: $target_os
AC_CONFIG_SRCDIR([README])
AM_INIT_AUTOMAKE

AC_CONFIG_HEADER([config.h])


dnl PACKAGE=$PACKAGE_NAME
dnl VERSION=$PACKAGE_VERSION
PACKAGE_TARNAME=mutabor

AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
AC_DEFINE_UNQUOTED(PACKAGE, "$PACKAGE", [Name of this package])
AC_DEFINE_UNQUOTED(VERSION, "$VERSION", [Version of this package])

AC_DEFINE_UNQUOTED(PACKAGE_BUGREPORT, "$PACKAGE_BUGREPORT",
                                      [address for reporting bugs])
AM_OPTIONS_WXCONFIG


AH_TOP([
#ifndef MUTABOR_CONFIG_H_INCLUDED
#define MUTABOR_CONFIG_H_INCLUDED
/* We need this, because some autoconf tests rely on this (e.g. stpcpy)
    and it should be used for new programs anyway */
#define _GNU_SOURCE  1
])

AH_BOTTOM([
/* Debug also for Bison output. */
#ifdef DEBUG
#  define YYDEBUG 1
#endif

/*
#ifdef MUST_REUSE
#  define REUSE(x) x
#else
#  define REUSE(x)
#endif
*/

#ifdef MUST_REUSE_C
#  define REUSE_C(x) x
#else
#  define REUSE_C(x)
#endif

#ifdef LOAD_LIBGNUINTL_H
#  include "libgnuintl.h"
#endif

#endif /* MUTABOR_CONFIG_H_INCLUDED */
])

AM_MAINTAINER_MODE
AC_ARG_ENABLE(debug,
	AS_HELP_STRING([--enable-debug],[Enable extra debugging functionality]),
	[AS_IF(test "$enableval" = yes,
	       AC_DEFINE(DEBUG,1,[Define to 1 for compiling in debug mode.]),
               AC_DEFINE_UNQUOTED(DEBUG,[$enableval]))
	CFLAGS="$CFLAGS -g"
	CXXFLAGS="$CXXFLAGS -g"
])

# Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_ARG_ENABLE(ansi,
	AS_HELP_STRING([--enable-ansi],[Enable strict ansi compiling and warnings]),
	[AS_IF(test "$enableval" = yes,
	       AC_DEFINE(ANSI,1,[Define to 1 for compiling in ansi mode.]),
               AC_DEFINE_UNQUOTED(ANSI,[$enableval]))
	 AX_CXXFLAGS_WARN_ALL_ANSI
	 AX_CFLAGS_WARN_ALL_ANSI
])
AC_ARG_ENABLE(gui,
	AS_HELP_STRING([--enable-gui],[Enable compiling ]),
	[AS_IF(test "$enableval" = yes,
	       AC_DEFINE(MUTWIN,1,[Define to 1 for compiling the gui version of $PACKAGE.]),
               AC_DEFINE_UNQUOTED(MUTWIN,[$enableval]))
],[
	       AC_DEFINE(MUTWIN,1,[Define to 1 for compiling the gui version of $PACKAGE.])
])
AC_DEFINE(RTMIDI,1,[Define to 1 for usage of the RtMidi Library.])
AM_PROG_LEX
AC_PROG_YACC
AC_PROG_LIBTOOL
AC_PROG_RANLIB
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PATH_PROG(PERL,perl)
AM_CONDITIONAL(COND_PERL, test -n "$PERL")
AS_IF(test -z "$PERL",
  AC_MSG_WARN([
          Some source files are generated using Perl. But I could not find
	  Perl. So changing those files will possibly have not the desired 
	  effect.

	  Simple compiling should work fine. Otherwise complain at 
	     $PACKAGE_BUGREPORT 
	  please.
]))

CXX_FOR_SCOPING
AS_IF(test "$cxx_iso_for_loop_scope" = yes,
  AC_DEFINE(REUSE(x), x, [Define if variables must be declared again in for loops]),
  AC_DEFINE(REUSE(x), , [Define if variables must be declared again in for loops]))
#./  AC_DEFINE_UNQUOTED(MUST_REUSE, [$cxx_iso_for_loop_scope]))
  
# Checks for libraries.
AC_CHECK_LIB(m,pow)

case "$target_os" in 

dnl GNU/Linux on an Intel or compatible
*linux*)
	PLATFORM=linux

	AM_PATH_ALSA(1.0.0,[
		AC_DEFINE(__LINUX_ALSASEQ__,1,[Define to 1 for compiling with alsa sequencer support.])
		],
		[
		AC_DEFINE_UNQUOTED(__LINUX_ALSASEQ__,1)
		AC_MSG_ERROR([
			ALSA headers or configuration not found. $PACKAGE depends on
			a working MIDI configuration for your System.

			Simple non realtime batch conversion is not yet availlable.
		])
	])

	;;

darwin*)
	PLATFORM=macosx
	AC_DEFINE(__MACOSX_CORE__,1,[Define to 1 for compiling with MAC OSX CoreMIDI support.])
	LDFLAGS="$LDFLAGS  -framework Carbon -Wl,-Y,1455 -framework CoreAudio -framework CoreMIDI"
	;;

*winnt*|*interix*|cygwin*|mingw*|uwin*)
	PLATFORM=windows
	AC_DEFINE(__WINDOWS_MM__,1,[Define to 1 for compiling with Windows MM system support.])
	ac_includes_default="$ac_includes_default 
	#include <windows.h>
	#include <mmsystem.h>
	"
	AC_LIB_WINMM([midiOutGetNumDevs])
	AC_LIBTOOL_RC
	dnl AC_LIBTOOL_LANG_RC_CONFIG
	AC_CHECK_HEADERS([winsock2.h])
	AC_CHECK_LIB_HEADER(ws2_32,ntohs,[
	#include <winsock2.h>
	])
	
	if test "$cross_compiling" = yes; then
		case "$target_os" in 
		mingw*|cygwin*)
			AC_MSG_NOTICE([
  Cross compiling for windows. Assuming you use a compiler
  with gcc style malloc and realloc.
            ])
			ac_cv_func_malloc_0_nonnull=yes
			ac_cv_func_realloc_0_nonnull=yes
			;;
		*)
			AC_MSG_WARN([
			Cross compiling for $target_os can not detect your 
			compiler behavior. Please, contact the author and help
			supplying needed information!
			])
		esac
	fi
	;;
*)
	AC_MSG_ERROR([
		Your target system could not be recognized. $PACKAGE depends on
		a working MIDI configuration for your System. So it can't be built
		without knowing it.
		
		Please contact the Development team at 
		    
		    $PACKAGE_BUGREPORT

		and provide the following information:

		* The output of configure
		* The description of your System.

	])

esac
AM_CONDITIONAL(COND_WINRC,test "$RC")
AM_GNU_GETTEXT

AM_PATH_WXCONFIG(2.6.0, wxWin=1)
if test "$wxWin" != 1; then
         AC_MSG_ERROR([
                wxWindows must be installed on your system
                but wx-config script couldn't be found.
     
                Please check that wx-config is in path, the directory
                where wxWindows libraries are installed (returned by
                'wx-config --libs' command) is in LD_LIBRARY_PATH or
                equivalent variable and wxWindows version is 2.6.0 or above.
        ])
	AC_SUBST(INTLDIR,intl)
	AC_SUBST(USE_INCLUDED_LIBWXINTL,no)
	AC_SUBST(BUILD_INCLUDED_LIBWXINTL,no)
else
	AC_DEFINE(WX,1,[Define to 1 if $PACKAGE should be compiled using wxWidgets.])
	AC_SUBST(INTLDIR,wxintl)
	AC_SUBST(USE_INCLUDED_LIBWXINTL,$USE_INCLUDED_LIBINTL)
	AC_SUBST(BUILD_INCLUDED_LIBWXINTL,$BUILD_INCLUDED_LIBINTL)
fi



# Checks for header files.
AC_HEADER_STDBOOL
AC_HEADER_TIME
AC_CHECK_HEADERS([limits.h stddef.h math.h netinet/in.h sys/time.h malloc.h mcheck.h])
ac_includes_default="$ac_includes_default 
#if HAVE_MALLOC_H
#  include <malloc.h>
#endif
"
echo \|$HAVE_NETINET_IN_H\|
if test "$ac_cv_header_netinet_in_h" = no ; then
	AC_SUBST(NETINET_INC,"-I\$(top_srcdir)/includes/netinet")
fi
if test "$HAVE_MCHECK_H"; then
	AC_SUBST(MCHECK,"mcheck")
fi

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T
AC_C_RESTRICT
AC_C_VOLATILE
AC_C_INLINE

AC_LANG_PUSH(C)
if test "$ac_cv_c_inline" != no ; then
  AC_DEFINE(HAVE_INLINE,1,[Define to 1 if the C Compiler supports inline functions.])
  AC_SUBST(HAVE_INLINE)
fi

dnl Check for "extern inline", using a modified version
dnl of the test for AC_C_INLINE from acspecific.mt
dnl
AC_CACHE_CHECK([for extern inline], ac_cv_c_extern_inline,
[ac_cv_c_extern_inline=no
AC_TRY_COMPILE([extern $ac_cv_c_inline double foo(double x);
extern $ac_cv_c_inline double foo(double x) { return x+1.0; };
double foo (double x) { return x + 1.0; };], 
[  foo(1.0)  ],
[ac_cv_c_extern_inline="yes"])
])

if test "$ac_cv_c_extern_inline" != no ; then
  AC_DEFINE(HAVE_EXTERN_INLINE,1,[Define to 1 if "extern inline" works.])
  AC_SUBST(HAVE_EXTERN_INLINE)
fi

AC_CACHE_CHECK([for variable scope in for loops in C mode], ac_cv_c_scope_reuse,
[
 AC_COMPILE_IFELSE([
	AC_LANG_PROGRAM([],[
	for (int i=1; i<3; i++) ;
	for (int i=1; i<4; i++) ; 
	exit (0);
	])],[ac_cv_c_scope_reuse=inside],[ac_cv_c_scope_reuse=outside])
])

if test $ac_cv_c_scope_reuse = inside
then
	AC_DEFINE(MUST_REUSE_C,1,[Define to x if the scope of C loop variables is inside the loop])
fi




AC_LANG(C++)

AC_CACHE_CHECK([for variable scope in for loops in C++ mode], ac_cv_cxx_scope_reuse,
[
 AC_COMPILE_IFELSE([
	AC_LANG_PROGRAM([],[
	for (int i=1; i<3; i++) ;
	for (int i=1; i<4; i++) ; 
	exit(0);
	])],[ac_cv_cxx_scope_reuse=inside],[ac_cv_cxx_scope_reuse=outside])
])
if test $ac_cv_cxx_scope_reuse = inside
then
	AC_DEFINE(MUST_REUSE,1,[Define to x if the scope of C++ loop variables is inside the loop])
fi

AC_LANG_POP(C++)

AC_CACHE_SAVE
AX_COMPILER_PCH_CXX
AX_COMPILER_PCH_C

# Checks for library functions.
AM_INTL_SUBDIR
AC_FUNC_MALLOC
AC_FUNC_ALLOCA
AC_FUNC_ERROR_AT_LINE
AC_FUNC_MEMCMP
AC_FUNC_REALLOC
AC_FUNC_SELECT_ARGTYPES
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([memmove pow getcwd gettimeofday memset select stpcpy strchr strstr]) 
AC_CHECK_FUNC(strdup)


AC_CONFIG_FILES([Makefile includes/Makefile includes/mutabor/Makefile libmutabor/Makefile libmutabor/tests/Makefile intl/libgnuintl.h po/Makefile.in wxintl/Makefile intl/Makefile])
AC_CONFIG_FILES([missfunc/Makefile])
AC_CONFIG_FILES([osdep/macosx/Info.plist])
AC_OUTPUT


