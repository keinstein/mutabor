///////////////////////////////////////////////////////////////////////////// C++ code generated with wxFormBuilder (version May  5 2008)// http://www.wxformbuilder.org///// PLEASE DO "NOT" EDIT THIS FILE!///////////////////////////////////////////////////////////////////////////#include "Mutabor.h"// Using the construction of a static object to ensure that the help provider is setclass wxFBContextSensitiveHelpSetter{public:wxFBContextSensitiveHelpSetter(){wxHelpProvider::Set( new wxHelpControllerHelpProvider );}};static wxFBContextSensitiveHelpSetter s_wxFBSetTheHelpProvider;///////////////////////////////////////////////////////////////////////////ConfigDlg::ConfigDlg( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style ){	this->SetSizeHints( wxDefaultSize, wxDefaultSize );	this->SetExtraStyle( wxDIALOG_EX_CONTEXTHELP );	this->SetToolTip( _("toooltip") );		wxFlexGridSizer* fgSizer5;	fgSizer5 = new wxFlexGridSizer( 2, 2, 0, 0 );	fgSizer5->AddGrowableCol( 2 );	fgSizer5->AddGrowableRow( 1 );	fgSizer5->SetFlexibleDirection( wxBOTH );	fgSizer5->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );		wxBoxSizer* bSizer1;	bSizer1 = new wxBoxSizer( wxVERTICAL );		wxString ToneSystemChoices[] = { _("as &relations"), _("as &tone system") };	int ToneSystemNChoices = sizeof( ToneSystemChoices ) / sizeof( wxString );	ToneSystem = new wxRadioBox( this, wxID_ANY, _("Tone System"), wxDefaultPosition, wxDefaultSize, ToneSystemNChoices, ToneSystemChoices, 1, wxRA_SPECIFY_COLS );	ToneSystem->SetSelection( 0 );	ToneSystem->SetToolTip( _("How shall the tone system be reported: relative or absolute?") );	ToneSystem->SetHelpText( _("The tone system will be printed either relative or absolute. Select, which one you prefer.") );		bSizer1->Add( ToneSystem, 0, wxALIGN_RIGHT|wxALL|wxEXPAND, 5 );		wxStaticBoxSizer* sbSizer1;	sbSizer1 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, _("Windows") ), wxVERTICAL );		SaveEditor = new wxCheckBox( this, wxID_ANY, _("save &editor files"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE );	SaveEditor->SetValue(true);		SaveEditor->SetToolTip( _("save editor window before compiling") );	SaveEditor->SetHelpText( _("Save Editor befor compiling the Mutabor logic") );		sbSizer1->Add( SaveEditor, 0, wxEXPAND, 5 );		ColorBars = new wxCheckBox( this, wxID_ANY, _("use color bars"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE );	ColorBars->SetValue(true);		ColorBars->SetToolTip( _("Use color bars.") );	ColorBars->SetHelpText( _("If you enable this, the status windows will be surrounded by the color of the corresponding Mutabor box.") );		sbSizer1->Add( ColorBars, 0, wxEXPAND, 5 );		bSizer1->Add( sbSizer1, 1, wxALL|wxEXPAND, 5 );		fgSizer5->Add( bSizer1, 1, wxEXPAND, 5 );		wxBoxSizer* ButtonSizer;	ButtonSizer = new wxBoxSizer( wxVERTICAL );			ButtonSizer->Add( 0, 0, 1, wxEXPAND, 5 );		wxID_OK = new wxButton( this, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );	wxID_OK->SetDefault(); 	wxID_OK->SetToolTip( _("Save settings.") );	wxID_OK->SetHelpText( _("Click here to save the current settings.") );		ButtonSizer->Add( wxID_OK, 0, wxALL|wxEXPAND, 5 );		wxID_CANCEL = new wxButton( this, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );	wxID_CANCEL->SetToolTip( _("Discard changes.") );	wxID_CANCEL->SetHelpText( _("Click here to discard the changes you made in this dialog.") );		ButtonSizer->Add( wxID_CANCEL, 0, wxALL|wxEXPAND, 5 );			ButtonSizer->Add( 0, 0, 1, wxEXPAND, 5 );		wxID_HELP = new wxButton( this, wxID_HELP, _("Help"), wxDefaultPosition, wxDefaultSize, wxNO_BORDER|wxNO_BORDER );	ButtonSizer->Add( wxID_HELP, 0, wxALL|wxEXPAND, 5 );			ButtonSizer->Add( 0, 0, 1, wxEXPAND, 5 );		fgSizer5->Add( ButtonSizer, 1, wxEXPAND, 5 );		this->SetSizer( fgSizer5 );	this->Layout();	fgSizer5->Fit( this );		this->Centre( wxBOTH );		// Connect Events	wxID_OK->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( ConfigDlg::save_data ), NULL, this );}ConfigDlg::~ConfigDlg(){	// Disconnect Events	wxID_OK->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( ConfigDlg::save_data ), NULL, this );}AboutDlg::AboutDlg( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style ){	this->SetSizeHints( wxDefaultSize, wxDefaultSize );		wxBoxSizer* bSizer3;	bSizer3 = new wxBoxSizer( wxVERTICAL );		m_htmlWin2 = new wxHtmlWindow( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxHW_SCROLLBAR_AUTO );	bSizer3->Add( m_htmlWin2, 0, wxALL|wxEXPAND, 5 );		m_sdbSizer1 = new wxStdDialogButtonSizer();	m_sdbSizer1OK = new wxButton( this, wxID_OK );	m_sdbSizer1->AddButton( m_sdbSizer1OK );	m_sdbSizer1->Realize();	bSizer3->Add( m_sdbSizer1, 1, wxEXPAND, 5 );		this->SetSizer( bSizer3 );	this->Layout();	bSizer3->Fit( this );}AboutDlg::~AboutDlg(){}CompileDlg::CompileDlg( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style ){	this->SetSizeHints( wxDefaultSize, wxDefaultSize );	this->SetExtraStyle( wxDIALOG_EX_METAL );		wxBoxSizer* bSizer4;	bSizer4 = new wxBoxSizer( wxVERTICAL );		wxStaticBoxSizer* sbSizer2;	sbSizer2 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, _("Source") ), wxVERTICAL );		wxFlexGridSizer* fgSizer3;	fgSizer3 = new wxFlexGridSizer( 2, 2, 0, 0 );	fgSizer3->SetFlexibleDirection( wxBOTH );	fgSizer3->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );		m_staticText1 = new wxStaticText( this, wxID_STATIC, _("File:"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );	m_staticText1->Wrap( -1 );	fgSizer3->Add( m_staticText1, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT|wxALL, 5 );		filename = new wxStaticText( this, IDC_COMP_FILE, _("No file."), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT|wxSUNKEN_BORDER );	filename->Wrap( 0 );	fgSizer3->Add( filename, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_LEFT|wxALL|wxEXPAND, 5 );		m_staticText3 = new wxStaticText( this, wxID_ANY, _("Line:"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT );	m_staticText3->Wrap( -1 );	fgSizer3->Add( m_staticText3, 0, wxALIGN_RIGHT|wxALL, 5 );		line = new wxStaticText( this, IDC_COMP_LINE, _("00000000"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxSUNKEN_BORDER );	line->Wrap( -1 );	fgSizer3->Add( line, 0, wxALL|wxEXPAND, 5 );		sbSizer2->Add( fgSizer3, 1, wxEXPAND, 0 );		bSizer4->Add( sbSizer2, 1, wxALL|wxEXPAND, 5 );		wxStaticBoxSizer* sbSizer3;	sbSizer3 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, _("Statistics") ), wxHORIZONTAL );		wxFlexGridSizer* fgSizer31;	fgSizer31 = new wxFlexGridSizer( 2, 2, 0, 0 );	fgSizer31->SetFlexibleDirection( wxBOTH );	fgSizer31->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );		m_staticText5 = new wxStaticText( this, wxID_STATIC, _("Logics:"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );	m_staticText5->Wrap( -1 );	fgSizer31->Add( m_staticText5, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT|wxALL|wxLEFT|wxRIGHT, 5 );		logic = new wxStaticText( this, IDC_COMP_LOGIC, _("000000"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxSUNKEN_BORDER );	logic->Wrap( -1 );	fgSizer31->Add( logic, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxEXPAND, 5 );		tonelabel = new wxStaticText( this, wxID_STATIC, _("Tones:"), wxDefaultPosition, wxDefaultSize, 0 );	tonelabel->Wrap( -1 );	fgSizer31->Add( tonelabel, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT|wxALL|wxLEFT|wxRIGHT, 5 );		tones = new wxStaticText( this, IDC_COMP_TONES, _("000000"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxSUNKEN_BORDER );	tones->Wrap( -1 );	fgSizer31->Add( tones, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxEXPAND, 5 );		m_staticText9 = new wxStaticText( this, wxID_STATIC, _("Tunes:"), wxDefaultPosition, wxDefaultSize, 0 );	m_staticText9->Wrap( -1 );	fgSizer31->Add( m_staticText9, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT|wxALL, 5 );		tunes = new wxStaticText( this, IDC_COMP_TUNES, _("000000"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxSUNKEN_BORDER );	tunes->Wrap( -1 );	fgSizer31->Add( tunes, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxEXPAND, 5 );		sbSizer3->Add( fgSizer31, 1, wxEXPAND, 5 );		m_staticline1 = new wxStaticLine( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLI_VERTICAL );	sbSizer3->Add( m_staticline1, 0, wxEXPAND | wxALL, 5 );		wxFlexGridSizer* fgSizer4;	fgSizer4 = new wxFlexGridSizer( 3, 2, 0, 0 );	fgSizer4->SetFlexibleDirection( wxBOTH );	fgSizer4->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );		m_staticText6 = new wxStaticText( this, wxID_STATIC, _("Tone systems:"), wxDefaultPosition, wxDefaultSize, 0 );	m_staticText6->Wrap( -1 );	fgSizer4->Add( m_staticText6, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT|wxALL, 5 );		tone_system = new wxStaticText( this, IDC_COMP_TONESYST, _("000000"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxSUNKEN_BORDER );	tone_system->Wrap( -1 );	fgSizer4->Add( tone_system, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxEXPAND, 5 );		m_staticText8 = new wxStaticText( this, wxID_STATIC, _("Intervals:"), wxDefaultPosition, wxDefaultSize, 0 );	m_staticText8->Wrap( -1 );	fgSizer4->Add( m_staticText8, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT|wxALL, 5 );		intervals = new wxStaticText( this, IDC_COMP_INTERVALS, _("000000"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxSUNKEN_BORDER );	intervals->Wrap( -1 );	fgSizer4->Add( intervals, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxEXPAND, 5 );		m_staticText10 = new wxStaticText( this, wxID_STATIC, _("Read chars:"), wxDefaultPosition, wxDefaultSize, 0 );	m_staticText10->Wrap( -1 );	fgSizer4->Add( m_staticText10, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT|wxALL, 5 );		chars = new wxStaticText( this, IDC_COMP_READCHARS, _("000000"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxSUNKEN_BORDER );	chars->Wrap( -1 );	fgSizer4->Add( chars, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxEXPAND, 5 );		sbSizer3->Add( fgSizer4, 1, wxEXPAND, 5 );		bSizer4->Add( sbSizer3, 1, wxALIGN_CENTER_HORIZONTAL|wxALL|wxEXPAND, 5 );		wxStaticBoxSizer* sbSizer4;	sbSizer4 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, _("Message") ), wxVERTICAL );		message = new wxStaticText( this, wxIDC_COMP_MESSAGE, _("Reading source ..."), wxDefaultPosition, wxDefaultSize, 0 );	message->Wrap( 1 );	sbSizer4->Add( message, 0, wxALL|wxEXPAND, 5 );		bSizer4->Add( sbSizer4, 1, wxALL|wxEXPAND, 5 );		wxID_OK = new wxButton( this, wxID_OK, _("Reading Source …"), wxDefaultPosition, wxDefaultSize, 0 );	wxID_OK->SetDefault(); 	wxID_OK->Enable( false );		bSizer4->Add( wxID_OK, 0, wxALL|wxEXPAND, 5 );		this->SetSizer( bSizer4 );	this->Layout();	bSizer4->Fit( this );		// Connect Events	wxID_OK->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( CompileDlg::Close() ), NULL, this );}CompileDlg::~CompileDlg(){	// Disconnect Events	wxID_OK->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( CompileDlg::Close() ), NULL, this );}mutabor_box::mutabor_box( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style ){	this->SetSizeHints( wxDefaultSize, wxDefaultSize );		wxFlexGridSizer* fgSizer5;	fgSizer5 = new wxFlexGridSizer( 3, 1, 0, 0 );	fgSizer5->SetFlexibleDirection( wxBOTH );	fgSizer5->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );		wxStaticBoxSizer* sbSizer5;	sbSizer5 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, _("Box") ), wxVERTICAL );		wxFlexGridSizer* fgSizer6;	fgSizer6 = new wxFlexGridSizer( 2, 2, 0, 0 );	fgSizer6->SetFlexibleDirection( wxBOTH );	fgSizer6->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );		use_box = new wxRadioButton( this, wxID_ANY, _("Box number:"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );	use_box->SetValue( true ); 	fgSizer6->Add( use_box, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP, 5 );		m_textCtrl2 = new wxTextCtrl( this, wxID_ANY, _("0"), wxDefaultPosition, wxDefaultSize, wxTE_RIGHT );	m_textCtrl2->SetMaxLength( 2 ); 	fgSizer6->Add( m_textCtrl2, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP, 5 );		guido_box = new wxRadioButton( this, wxID_ANY, _("GUIDO-File"), wxDefaultPosition, wxDefaultSize, 0 );	fgSizer6->Add( guido_box, 0, wxTOP, 5 );		m_filePicker1 = new wxFilePickerCtrl( this, wxID_ANY, wxEmptyString, _("Select a GUIDO file"), wxT("GUIDO files|*.gmn"), wxDefaultPosition, wxDefaultSize, wxFLP_DEFAULT_STYLE|wxFLP_FILE_MUST_EXIST|wxFLP_OPEN );	fgSizer6->Add( m_filePicker1, 0, 0, 5 );		sbSizer5->Add( fgSizer6, 1, wxEXPAND, 5 );		no_box = new wxRadioButton( this, wxID_ANY, _("no Box / thru-mode"), wxPoint( -1,-1 ), wxDefaultSize, 0 );	sbSizer5->Add( no_box, 0, wxTOP, 5 );		fgSizer5->Add( sbSizer5, 1, wxALL|wxEXPAND, 5 );		wxString m_radioBox2Choices[] = { _("active"), _("passive") };	int m_radioBox2NChoices = sizeof( m_radioBox2Choices ) / sizeof( wxString );	m_radioBox2 = new wxRadioBox( this, wxID_ANY, _("Mode"), wxDefaultPosition, wxDefaultSize, m_radioBox2NChoices, m_radioBox2Choices, 1, wxRA_SPECIFY_ROWS );	m_radioBox2->SetSelection( 0 );	fgSizer5->Add( m_radioBox2, 0, wxALL|wxEXPAND, 5 );		m_sdbSizer2 = new wxStdDialogButtonSizer();	m_sdbSizer2OK = new wxButton( this, wxID_OK );	m_sdbSizer2->AddButton( m_sdbSizer2OK );	m_sdbSizer2Cancel = new wxButton( this, wxID_CANCEL );	m_sdbSizer2->AddButton( m_sdbSizer2Cancel );	m_sdbSizer2Help = new wxButton( this, wxID_HELP );	m_sdbSizer2->AddButton( m_sdbSizer2Help );	m_sdbSizer2->Realize();	fgSizer5->Add( m_sdbSizer2, 1, wxALL|wxEXPAND, 5 );		this->SetSizer( fgSizer5 );	this->Layout();	fgSizer5->Fit( this );		// Connect Events	use_box->Connect( wxEVT_COMMAND_RADIOBUTTON_SELECTED, wxCommandEventHandler( mutabor_box::enable_box ), NULL, this );}mutabor_box::~mutabor_box(){	// Disconnect Events	use_box->Disconnect( wxEVT_COMMAND_RADIOBUTTON_SELECTED, wxCommandEventHandler( mutabor_box::enable_box ), NULL, this );}MyDialog5::MyDialog5( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style ){	this->SetSizeHints( wxDefaultSize, wxDefaultSize );		wxBoxSizer* bSizer5;	bSizer5 = new wxBoxSizer( wxVERTICAL );		this->SetSizer( bSizer5 );	this->Layout();	bSizer5->Fit( this );}MyDialog5::~MyDialog5(){}